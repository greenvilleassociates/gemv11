// <auto-generated />
using System;
using GEMAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GEMAPI.Migrations
{
    [DbContext(typeof(GemContext))]
    partial class GemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "snowflake", "snowflake");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "spock", "spock");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("emp_eid_seq")
                .StartsAt(2L)
                .IncrementsBy(2);

            modelBuilder.HasSequence("emp_eid_seq0")
                .StartsAt(1000L);

            modelBuilder.HasSequence("emp_eid_seq1")
                .IncrementsBy(2);

            modelBuilder.HasSequence("emp_eid_seq2")
                .StartsAt(10000L);

            modelBuilder.HasSequence("id_seq", "snowflake");

            modelBuilder.HasSequence("uid_seq")
                .StartsAt(20000L);

            modelBuilder.Entity("GEMAPI.Models.Gaccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Accountname")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("accountname");

                    b.Property<int?>("Companyid")
                        .HasColumnType("integer")
                        .HasColumnName("companyid");

                    b.Property<int?>("Wholesalevendorid")
                        .HasColumnType("integer")
                        .HasColumnName("wholesalevendorid");

                    b.HasKey("Id")
                        .HasName("gaccounts_pkey");

                    b.ToTable("gaccounts", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gapp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Appdescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("appdescription");

                    b.Property<string>("Appid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("appid");

                    b.Property<int?>("Appregion")
                        .HasColumnType("integer")
                        .HasColumnName("appregion");

                    b.Property<int?>("Apptype")
                        .HasColumnType("integer")
                        .HasColumnName("apptype");

                    b.Property<string>("Dbmstopology")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dbmstopology");

                    b.Property<string>("Dbmstype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dbmstype");

                    b.Property<string>("Dbmsvendor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dbmsvendor");

                    b.Property<int?>("Gridid")
                        .HasColumnType("integer")
                        .HasColumnName("gridid");

                    b.Property<int?>("Iscompliant")
                        .HasColumnType("integer")
                        .HasColumnName("iscompliant");

                    b.Property<int?>("Legalcontactid")
                        .HasColumnType("integer")
                        .HasColumnName("legalcontactid");

                    b.Property<DateOnly?>("Licenseexpiration")
                        .HasColumnType("date")
                        .HasColumnName("licenseexpiration");

                    b.Property<string>("Licenseid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("licenseid");

                    b.Property<int?>("Licensetype")
                        .HasColumnType("integer")
                        .HasColumnName("licensetype");

                    b.Property<string>("Targetgeometry")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("targetgeometry")
                        .HasDefaultValueSql("'4sidedpolygon'::character varying");

                    b.Property<string>("Targetgrid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("targetgrid")
                        .HasDefaultValueSql("'US-InnerCore'::character varying");

                    b.Property<int?>("Targetgridid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("targetgridid");

                    b.Property<int?>("Totalseats")
                        .HasColumnType("integer")
                        .HasColumnName("totalseats");

                    b.Property<int?>("Vendorid")
                        .HasColumnType("integer")
                        .HasColumnName("vendorid");

                    b.Property<string>("Versionnumber")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("versionnumber");

                    b.HasKey("Id")
                        .HasName("gapps_pkey");

                    b.ToTable("gapps", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gapptype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Apptype")
                        .HasColumnType("integer")
                        .HasColumnName("apptype");

                    b.Property<string>("Apptypedescription")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("apptypedescription");

                    b.HasKey("Id")
                        .HasName("gapptype_pkey");

                    b.ToTable("gapptype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gbranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brancdescription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("brancdescription");

                    b.Property<string>("Branchid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("branchid");

                    b.Property<string>("Siteid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("siteid");

                    b.HasKey("Id")
                        .HasName("gbranches_pkey");

                    b.ToTable("gbranches", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gbregion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Regiondescription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("regiondescription");

                    b.Property<string>("Regionid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("regionid");

                    b.HasKey("Id")
                        .HasName("gbregions_pkey");

                    b.ToTable("gbregions", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Approvalid")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("approvalid")
                        .IsFixedLength();

                    b.Property<string>("Busunit")
                        .HasMaxLength(25)
                        .HasColumnType("character(25)")
                        .HasColumnName("busunit")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Changeend")
                        .HasColumnType("date")
                        .HasColumnName("changeend");

                    b.Property<long?>("Changeid")
                        .HasColumnType("bigint")
                        .HasColumnName("changeid");

                    b.Property<DateOnly?>("Changestart")
                        .HasColumnType("date")
                        .HasColumnName("changestart");

                    b.Property<string>("Comments")
                        .HasMaxLength(3000)
                        .HasColumnType("character(3000)")
                        .HasColumnName("comments")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(3500)
                        .HasColumnType("character(3500)")
                        .HasColumnName("description")
                        .IsFixedLength();

                    b.Property<string>("Engineerid")
                        .HasMaxLength(50)
                        .HasColumnType("character(50)")
                        .HasColumnName("engineerid")
                        .IsFixedLength();

                    b.Property<string>("Holdinfo")
                        .HasMaxLength(1000)
                        .HasColumnType("character(1000)")
                        .HasColumnName("holdinfo")
                        .IsFixedLength();

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("status")
                        .IsFixedLength();

                    b.Property<string>("Workeffortsize")
                        .HasMaxLength(25)
                        .HasColumnType("character(25)")
                        .HasColumnName("workeffortsize")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("gchange_pkey");

                    b.ToTable("gchange", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gchannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Channelid")
                        .HasColumnType("integer")
                        .HasColumnName("channelid");

                    b.Property<string>("Circuitid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("circuitid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.HasKey("Id")
                        .HasName("gchannels_pkey");

                    b.ToTable("gchannels", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gchanneltype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Channeltypeid")
                        .HasColumnType("integer")
                        .HasColumnName("channeltypeid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("gchanneltype_pkey");

                    b.ToTable("gchanneltype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gcircuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aloc")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("aloc");

                    b.Property<int?>("Circuittypeid")
                        .HasColumnType("integer")
                        .HasColumnName("circuittypeid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Zloc")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("zloc");

                    b.HasKey("Id")
                        .HasName("gcircuits_pkey");

                    b.ToTable("gcircuits", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gcircuittype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Circuittypeid")
                        .HasColumnType("integer")
                        .HasColumnName("circuittypeid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("gcircuittype_pkey");

                    b.ToTable("gcircuittype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gcompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alohaid")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("alohaid");

                    b.Property<string>("Companyname")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("companyname");

                    b.Property<string>("Dynamicsid")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("dynamicsid");

                    b.Property<string>("Oracleid")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("oracleid");

                    b.HasKey("Id")
                        .HasName("gcompany_pkey");

                    b.ToTable("gcompany", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gcomputer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Computerid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("computerid");

                    b.Property<int?>("Computertype")
                        .HasColumnType("integer")
                        .HasColumnName("computertype");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gcomputer_pkey");

                    b.ToTable("gcomputer", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gconduit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Conduitid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("conduitid");

                    b.Property<int?>("Conduittype")
                        .HasColumnType("integer")
                        .HasColumnName("conduittype");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Rowid")
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    b.HasKey("Id")
                        .HasName("gconduits_pkey");

                    b.ToTable("gconduits", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gcountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Countryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("countryid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Exchange")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("exchange");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("region");

                    b.HasKey("Id")
                        .HasName("gcountry_pkey");

                    b.ToTable("gcountry", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gcpeother", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vendorid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("vendorid");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gcpeother_pkey");

                    b.ToTable("gcpeother", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gcpetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpetypeid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cpetypeid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("gcpetype_pkey");

                    b.ToTable("gcpetype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gcustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address2");

                    b.Property<string>("Alohaid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("alohaid");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Customerid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customerid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Dynamicsid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dynamicsid");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Oracleid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("oracleid");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("Zip")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("gcustomer_pkey");

                    b.ToTable("gcustomer", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gdataservice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dataserviceid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dataserviceid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Networkid")
                        .HasColumnType("integer")
                        .HasColumnName("networkid");

                    b.HasKey("Id")
                        .HasName("gdataservices_pkey");

                    b.ToTable("gdataservices", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gdbmsrelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Releasedescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("releasedescription");

                    b.Property<string>("Releasesystemrequirements")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("releasesystemrequirements");

                    b.Property<string>("Releaseversion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("releaseversion");

                    b.Property<string>("Vendorid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorid");

                    b.Property<string>("Vendorname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorname");

                    b.HasKey("Id")
                        .HasName("gdbmsreleases_pkey");

                    b.ToTable("gdbmsreleases", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gdbmsreplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Replicationdescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("replicationdescription");

                    b.Property<string>("Vendorid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorid");

                    b.Property<string>("Vendorname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorname");

                    b.HasKey("Id")
                        .HasName("gdbmsreplication_pkey");

                    b.ToTable("gdbmsreplication", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gdbmstopology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Dbmstopology")
                        .HasColumnType("integer")
                        .HasColumnName("dbmstopology");

                    b.Property<string>("Dbmstopologydescription")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("dbmstopologydescription");

                    b.HasKey("Id")
                        .HasName("gdbmstopology_pkey");

                    b.ToTable("gdbmstopology", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gdbmstype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Dbmstype")
                        .HasColumnType("integer")
                        .HasColumnName("dbmstype");

                    b.Property<string>("Dbmstypedescription")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("dbmstypedescription");

                    b.HasKey("Id")
                        .HasName("gdbmstype_pkey");

                    b.ToTable("gdbmstype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gdbmsvendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dynamicsid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dynamicsid");

                    b.Property<string>("Oracleid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("oracleid");

                    b.Property<string>("Vendorid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorid");

                    b.Property<string>("Vendorname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorname");

                    b.HasKey("Id")
                        .HasName("gdbmsvendors_pkey");

                    b.ToTable("gdbmsvendors", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gdisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Diskid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("diskid");

                    b.Property<int?>("Disktype")
                        .HasColumnType("integer")
                        .HasColumnName("disktype");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Lat")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("lat");

                    b.Property<string>("Long")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("long");

                    b.Property<int?>("Machineid")
                        .HasColumnType("integer")
                        .HasColumnName("machineid");

                    b.Property<int?>("Serverid")
                        .HasColumnType("integer")
                        .HasColumnName("serverid");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gdisk_pkey");

                    b.ToTable("gdisk", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gdisktype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Disktype")
                        .HasColumnType("integer")
                        .HasColumnName("disktype");

                    b.Property<string>("Vendorid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorid");

                    b.HasKey("Id")
                        .HasName("gdisktype_pkey");

                    b.ToTable("gdisktype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gdservicetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Datatypeid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("datatypeid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("gdservicetype_pkey");

                    b.ToTable("gdservicetype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gemployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Employeeid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("employeeid");

                    b.Property<string>("Fullname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fullname");

                    b.Property<string>("Homeoffice")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("homeoffice");

                    b.Property<string>("Primarysite")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("primarysite");

                    b.HasKey("Id")
                        .HasName("gemployees_pkey");

                    b.ToTable("gemployees", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gengineregion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Regiondescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("regiondescription");

                    b.Property<int?>("Regionid")
                        .HasColumnType("integer")
                        .HasColumnName("regionid");

                    b.HasKey("Id")
                        .HasName("gengineregions_pkey");

                    b.ToTable("gengineregions", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gfax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Faxid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("faxid");

                    b.Property<int?>("Faxtype")
                        .HasColumnType("integer")
                        .HasColumnName("faxtype");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gfax_pkey");

                    b.ToTable("gfax", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gfirewall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Firewallid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("firewallid");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gfirewalls_pkey");

                    b.ToTable("gfirewalls", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gfirewallcontext", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contextid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("contextid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Firewallid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("firewallid");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gfirewallcontexts_pkey");

                    b.ToTable("gfirewallcontexts", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ggateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Gatewayid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("gatewayid");

                    b.Property<int?>("Gatewaytype")
                        .HasColumnType("integer")
                        .HasColumnName("gatewaytype");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("ggateways_pkey");

                    b.ToTable("ggateways", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ggatewaytype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("ggatewaytype_pkey");

                    b.ToTable("ggatewaytype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ggrid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("Drnode1id")
                        .HasColumnType("integer")
                        .HasColumnName("drnode1id");

                    b.Property<int?>("Drnode2id")
                        .HasColumnType("integer")
                        .HasColumnName("drnode2id");

                    b.Property<int?>("Drsite1")
                        .HasColumnType("integer")
                        .HasColumnName("drsite1");

                    b.Property<int?>("Drsite2")
                        .HasColumnType("integer")
                        .HasColumnName("drsite2");

                    b.Property<string>("Geometry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("geometry");

                    b.Property<int?>("Gridnode1id")
                        .HasColumnType("integer")
                        .HasColumnName("gridnode1id");

                    b.Property<int?>("Gridnode2id")
                        .HasColumnType("integer")
                        .HasColumnName("gridnode2id");

                    b.Property<int?>("Gridnode3id")
                        .HasColumnType("integer")
                        .HasColumnName("gridnode3id");

                    b.Property<int?>("Gridnode4id")
                        .HasColumnType("integer")
                        .HasColumnName("gridnode4id");

                    b.Property<int?>("Gridnode5id")
                        .HasColumnType("integer")
                        .HasColumnName("gridnode5id");

                    b.Property<int?>("Gridnode6id")
                        .HasColumnType("integer")
                        .HasColumnName("gridnode6id");

                    b.Property<int?>("Gridsite1")
                        .HasColumnType("integer")
                        .HasColumnName("gridsite1");

                    b.Property<int?>("Gridsite2")
                        .HasColumnType("integer")
                        .HasColumnName("gridsite2");

                    b.Property<int?>("Gridsite3")
                        .HasColumnType("integer")
                        .HasColumnName("gridsite3");

                    b.Property<int?>("Gridsite4")
                        .HasColumnType("integer")
                        .HasColumnName("gridsite4");

                    b.Property<int?>("Gridsite5")
                        .HasColumnType("integer")
                        .HasColumnName("gridsite5");

                    b.Property<int?>("Gridsite6")
                        .HasColumnType("integer")
                        .HasColumnName("gridsite6");

                    b.Property<int?>("Rootid1")
                        .HasColumnType("integer")
                        .HasColumnName("rootid1");

                    b.Property<int?>("Rootid2")
                        .HasColumnType("integer")
                        .HasColumnName("rootid2");

                    b.Property<string>("Vendor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendor");

                    b.Property<string>("Vendorgridname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("vendorgridname");

                    b.Property<string>("Vendorid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("vendorid");

                    b.HasKey("Id")
                        .HasName("ggrids_pkey");

                    b.ToTable("ggrids", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ggridnode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("Floorid")
                        .HasColumnType("integer")
                        .HasColumnName("floorid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("Locationid")
                        .HasColumnType("integer")
                        .HasColumnName("locationid");

                    b.Property<int?>("Rackid")
                        .HasColumnType("integer")
                        .HasColumnName("rackid");

                    b.Property<int?>("Rootid1")
                        .HasColumnType("integer")
                        .HasColumnName("rootid1");

                    b.Property<int?>("Rootid2")
                        .HasColumnType("integer")
                        .HasColumnName("rootid2");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Telemetryip")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("telemetryip");

                    b.HasKey("Id")
                        .HasName("ggridnodes_pkey");

                    b.ToTable("ggridnodes", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ggridroot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("Floorid")
                        .HasColumnType("integer")
                        .HasColumnName("floorid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("Locationid")
                        .HasColumnType("integer")
                        .HasColumnName("locationid");

                    b.Property<int?>("Rackid")
                        .HasColumnType("integer")
                        .HasColumnName("rackid");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Telemetryip")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("telemetryip");

                    b.HasKey("Id")
                        .HasName("ggridroots_pkey");

                    b.ToTable("ggridroots", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ggridtopology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Topologydescription")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("topologydescription");

                    b.Property<string>("Topologyid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("topologyid");

                    b.HasKey("Id")
                        .HasName("ggridtopology_pkey");

                    b.ToTable("ggridtopology", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ghdvideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Videoid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("videoid");

                    b.Property<int?>("Vidtype")
                        .HasColumnType("integer")
                        .HasColumnName("vidtype");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("ghdvideo_pkey");

                    b.ToTable("ghdvideo", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ghost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Imageid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageid");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("Lpars")
                        .HasColumnType("integer")
                        .HasColumnName("lpars");

                    b.Property<string>("Serverid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("serverid");

                    b.Property<string>("Switchid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("switchid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("ghosts_pkey");

                    b.ToTable("ghosts", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ghostimage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Imageid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("imageid");

                    b.Property<string>("Imageurl")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("imageurl");

                    b.Property<string>("Imagevendor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imagevendor");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Operatingsystem")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("operatingsystem");

                    b.Property<string>("Vendoraccountid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendoraccountid");

                    b.HasKey("Id")
                        .HasName("ghostimages_pkey");

                    b.ToTable("ghostimages", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ghostlpar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Lparid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("lparid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("ghostlpars_pkey");

                    b.ToTable("ghostlpars", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ghostvm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vmid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("vmid");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("ghostvms_pkey");

                    b.ToTable("ghostvms", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ghregion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Regiondescription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("regiondescription");

                    b.Property<string>("Regionid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("regionid");

                    b.HasKey("Id")
                        .HasName("ghregions_pkey");

                    b.ToTable("ghregions", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ginventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Inventorytype")
                        .HasColumnType("integer")
                        .HasColumnName("inventorytype");

                    b.Property<string>("Serialnumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("serialnumber");

                    b.HasKey("Id")
                        .HasName("inventory_pkey");

                    b.ToTable("ginventory", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Ginventorytype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("inventorytype_pkey");

                    b.ToTable("ginventorytype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gitsm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("Closedate")
                        .HasColumnType("date")
                        .HasColumnName("closedate");

                    b.Property<string>("Custid")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("custid")
                        .IsFixedLength();

                    b.Property<string>("Dynamicsid")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("dynamicsid")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Opendate")
                        .HasColumnType("date")
                        .HasColumnName("opendate");

                    b.Property<string>("Oracleid")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("oracleid")
                        .IsFixedLength();

                    b.Property<string>("Priority")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("priority")
                        .IsFixedLength();

                    b.Property<string>("Res1")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("res1")
                        .IsFixedLength();

                    b.Property<string>("Res2")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("res2")
                        .IsFixedLength();

                    b.Property<string>("Res3")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("res3")
                        .IsFixedLength();

                    b.Property<string>("Res4")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("res4")
                        .IsFixedLength();

                    b.Property<string>("Summary")
                        .HasMaxLength(200)
                        .HasColumnType("character(200)")
                        .HasColumnName("summary")
                        .IsFixedLength();

                    b.Property<long?>("Ticketid")
                        .HasColumnType("bigint")
                        .HasColumnName("ticketid");

                    b.Property<string>("Ticketstatus")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("ticketstatus")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("gitsm_pkey");

                    b.ToTable("gitsm", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.GitsmDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Detailid")
                        .HasColumnType("bigint")
                        .HasColumnName("detailid");

                    b.Property<string>("Linedetail")
                        .HasMaxLength(1000)
                        .HasColumnType("character(1000)")
                        .HasColumnName("linedetail")
                        .IsFixedLength();

                    b.Property<string>("Linenumber")
                        .HasMaxLength(50)
                        .HasColumnType("character(50)")
                        .HasColumnName("linenumber")
                        .IsFixedLength();

                    b.Property<long?>("Ticketid")
                        .HasColumnType("bigint")
                        .HasColumnName("ticketid");

                    b.HasKey("Id")
                        .HasName("gitsm_detail_pkey");

                    b.ToTable("gitsm_detail", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Glayer2switch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Siteid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("siteid");

                    b.HasKey("Id")
                        .HasName("glayer2switches_pkey");

                    b.ToTable("glayer2switches", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Glicensetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Licensetypeid")
                        .HasColumnType("integer")
                        .HasColumnName("licensetypeid");

                    b.Property<string>("Term")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("term");

                    b.HasKey("Id")
                        .HasName("glicensetype_pkey");

                    b.ToTable("glicensetype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gmanager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Fullname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fullname");

                    b.Property<string>("Managerid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("managerid");

                    b.HasKey("Id")
                        .HasName("gmanagers_pkey");

                    b.ToTable("gmanagers", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gnetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Networkid")
                        .HasColumnType("integer")
                        .HasColumnName("networkid");

                    b.Property<int?>("Networktypeid")
                        .HasColumnType("integer")
                        .HasColumnName("networktypeid");

                    b.HasKey("Id")
                        .HasName("gnetworks_pkey");

                    b.ToTable("gnetworks", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gnetworksplicebox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Gpslat")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("gpslat");

                    b.Property<string>("Gpslong")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("gpslong");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<long?>("Spliceid")
                        .HasColumnType("bigint")
                        .HasColumnName("spliceid");

                    b.Property<string>("User1")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("user1");

                    b.Property<string>("User2")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("user2");

                    b.Property<string>("User3")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("user3");

                    b.Property<string>("User4")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("user4");

                    b.Property<string>("User5")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("user5");

                    b.HasKey("Id")
                        .HasName("gnetworksplicebox_pkey");

                    b.ToTable("gnetworksplicebox", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gnetworktype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Networktypeid")
                        .HasColumnType("integer")
                        .HasColumnName("networktypeid");

                    b.HasKey("Id")
                        .HasName("gnetworktype_pkey");

                    b.ToTable("gnetworktype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gopticalring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Lat")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("lat");

                    b.Property<string>("Long")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("long");

                    b.Property<string>("Ringid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("ringid");

                    b.Property<int?>("Ringtype")
                        .HasColumnType("integer")
                        .HasColumnName("ringtype");

                    b.Property<int?>("Siteid1")
                        .HasColumnType("integer")
                        .HasColumnName("siteid1");

                    b.Property<int?>("Siteid2")
                        .HasColumnType("integer")
                        .HasColumnName("siteid2");

                    b.Property<int?>("Siteid3")
                        .HasColumnType("integer")
                        .HasColumnName("siteid3");

                    b.Property<int?>("Siteid4")
                        .HasColumnType("integer")
                        .HasColumnName("siteid4");

                    b.Property<int?>("Siteid5")
                        .HasColumnType("integer")
                        .HasColumnName("siteid5");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<int?>("Vendorid")
                        .HasColumnType("integer")
                        .HasColumnName("vendorid");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gopticalring_pkey");

                    b.ToTable("gopticalring", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gopticalsegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aloc")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("aloc");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Segmenttypeid")
                        .HasColumnType("integer")
                        .HasColumnName("segmenttypeid");

                    b.Property<string>("Zloc")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("zloc");

                    b.HasKey("Id")
                        .HasName("gopticalsegments_pkey");

                    b.ToTable("gopticalsegments", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gopttype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Opttypeid")
                        .HasColumnType("integer")
                        .HasColumnName("opttypeid");

                    b.HasKey("Id")
                        .HasName("gopttype_pkey");

                    b.ToTable("gopttype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gphone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Lat")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("lat");

                    b.Property<string>("Long")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("long");

                    b.Property<string>("Phoneid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("phoneid");

                    b.Property<int?>("Phonetype")
                        .HasColumnType("integer")
                        .HasColumnName("phonetype");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gphones_pkey");

                    b.ToTable("gphones", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gphysicalpar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.HasKey("Id")
                        .HasName("gphysicalpar_pkey");

                    b.ToTable("gphysicalpar", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gproduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Division")
                        .HasMaxLength(30)
                        .HasColumnType("character(30)")
                        .HasColumnName("division")
                        .IsFixedLength();

                    b.Property<string>("Dynamicsid")
                        .HasMaxLength(50)
                        .HasColumnType("character(50)")
                        .HasColumnName("dynamicsid")
                        .IsFixedLength();

                    b.Property<string>("Oracleid")
                        .HasMaxLength(50)
                        .HasColumnType("character(50)")
                        .HasColumnName("oracleid")
                        .IsFixedLength();

                    b.Property<string>("ProductWooId")
                        .HasMaxLength(50)
                        .HasColumnType("character(50)")
                        .HasColumnName("product_woo_id")
                        .IsFixedLength();

                    b.Property<string>("ProductWooUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character(250)")
                        .HasColumnName("product_woo_url")
                        .IsFixedLength();

                    b.Property<int?>("Productid")
                        .HasColumnType("integer")
                        .HasColumnName("productid");

                    b.Property<string>("Productname")
                        .HasMaxLength(50)
                        .HasColumnType("character(50)")
                        .HasColumnName("productname")
                        .IsFixedLength();

                    b.Property<string>("ProudctWooInstance")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("proudct_woo_instance")
                        .IsFixedLength();

                    b.Property<string>("Vendorid")
                        .HasMaxLength(25)
                        .HasColumnType("character(25)")
                        .HasColumnName("vendorid")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("gproducts_pkey");

                    b.ToTable("gproducts", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Grightofway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Rowid")
                        .HasColumnType("integer")
                        .HasColumnName("rowid");

                    b.Property<int?>("Rowtype")
                        .HasColumnType("integer")
                        .HasColumnName("rowtype");

                    b.HasKey("Id")
                        .HasName("grightofway_pkey");

                    b.ToTable("grightofway", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Grouter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Routerid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("routerid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("grouters_pkey");

                    b.ToTable("grouters", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gsecvideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Videoid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("videoid");

                    b.Property<int?>("Vidtype")
                        .HasColumnType("integer")
                        .HasColumnName("vidtype");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gsecvideo_pkey");

                    b.ToTable("gsecvideo", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gserver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Serverid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("serverid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gservers_pkey");

                    b.ToTable("gservers", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gserviceorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Custid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("custid");

                    b.Property<string>("Orderdescription")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("orderdescription");

                    b.Property<int?>("Ordertype")
                        .HasColumnType("integer")
                        .HasColumnName("ordertype");

                    b.Property<string>("Regiondescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("regiondescription");

                    b.Property<int?>("Regionid")
                        .HasColumnType("integer")
                        .HasColumnName("regionid");

                    b.Property<int?>("Totalitems")
                        .HasColumnType("integer")
                        .HasColumnName("totalitems");

                    b.HasKey("Id")
                        .HasName("gserviceorders_pkey");

                    b.ToTable("gserviceorders", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gserviceorderdetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Federalvat")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("federalvat");

                    b.Property<string>("Listcost")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("listcost");

                    b.Property<int?>("Skuid")
                        .HasColumnType("integer")
                        .HasColumnName("skuid");

                    b.Property<string>("Skuidc")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("skuidc");

                    b.Property<string>("Statetax")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("statetax");

                    b.Property<string>("Unitcost")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("unitcost");

                    b.HasKey("Id")
                        .HasName("gserviceorderdetail_pkey");

                    b.ToTable("gserviceorderdetail", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gserviceordertype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Servicetypedescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("servicetypedescription");

                    b.Property<int?>("Servicetypeid")
                        .HasColumnType("integer")
                        .HasColumnName("servicetypeid");

                    b.HasKey("Id")
                        .HasName("gserviceordertype_pkey");

                    b.ToTable("gserviceordertype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gsite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("address2");

                    b.Property<string>("Cllicode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cllicode");

                    b.Property<string>("Fax")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fax");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("phone");

                    b.Property<string>("Postal")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("postal");

                    b.Property<string>("Siteclli")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("siteclli");

                    b.Property<int?>("Sitecontactid")
                        .HasColumnType("integer")
                        .HasColumnName("sitecontactid");

                    b.Property<string>("Sitedescription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sitedescription");

                    b.Property<string>("Siteid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("siteid");

                    b.Property<string>("Stateregion")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("stateregion");

                    b.HasKey("Id")
                        .HasName("gsites_pkey");

                    b.ToTable("gsites", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gsitetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Sitetypeid")
                        .HasColumnType("integer")
                        .HasColumnName("sitetypeid");

                    b.HasKey("Id")
                        .HasName("gsitetype_pkey");

                    b.ToTable("gsitetype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gsoftwarelicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alertemail")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("alertemail");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<int?>("Gridid")
                        .HasColumnType("integer")
                        .HasColumnName("gridid");

                    b.Property<string>("Licenseid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("licenseid");

                    b.Property<int?>("Licensetypeid")
                        .HasColumnType("integer")
                        .HasColumnName("licensetypeid");

                    b.Property<DateOnly?>("Notificationdate")
                        .HasColumnType("date")
                        .HasColumnName("notificationdate");

                    b.Property<DateOnly?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<int?>("Technicalcontactid")
                        .HasColumnType("integer")
                        .HasColumnName("technicalcontactid");

                    b.Property<int?>("Totalseats")
                        .HasColumnType("integer")
                        .HasColumnName("totalseats");

                    b.Property<int?>("Vendorid")
                        .HasColumnType("integer")
                        .HasColumnName("vendorid");

                    b.HasKey("Id")
                        .HasName("gsoftwarelicenses_pkey");

                    b.ToTable("gsoftwarelicenses", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gswitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Switchid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("switchid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gswitches_pkey");

                    b.ToTable("gswitches", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gtelephonenumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Channelid")
                        .HasColumnType("integer")
                        .HasColumnName("channelid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Phoneid")
                        .HasColumnType("integer")
                        .HasColumnName("phoneid");

                    b.Property<string>("Tn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tn");

                    b.HasKey("Id")
                        .HasName("gtelephonenumber_pkey");

                    b.ToTable("gtelephonenumber", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gtrunk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.HasKey("Id")
                        .HasName("gtrunks_pkey");

                    b.ToTable("gtrunks", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gtrunktype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Trunktypeid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("trunktypeid");

                    b.HasKey("Id")
                        .HasName("gtrunktype_pkey");

                    b.ToTable("gtrunktype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Guser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address2");

                    b.Property<string>("Cardaddress1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardaddress1");

                    b.Property<string>("Cardaddress2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardaddress2");

                    b.Property<string>("Cardcity")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardcity");

                    b.Property<string>("Cardcountry")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardcountry");

                    b.Property<string>("Cardnumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardnumber");

                    b.Property<string>("Cardregion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardregion");

                    b.Property<string>("Cardzip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardzip");

                    b.Property<string>("Cellphone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cellphone");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Corporatename")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("corporatename");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Expirecard")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("expirecard");

                    b.Property<string>("Faxnumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("faxnumber");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("firstname");

                    b.Property<string>("Firstproduct")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstproduct");

                    b.Property<string>("Fullname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("fullname");

                    b.Property<int?>("Jid")
                        .HasColumnType("integer")
                        .HasColumnName("jid");

                    b.Property<string>("Keytype")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("keytype");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("lastname");

                    b.Property<string>("Nameoncard")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nameoncard");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Postal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("region");

                    b.Property<string>("Registrationdate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("registrationdate");

                    b.Property<string>("Secondproduct")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("secondproduct");

                    b.Property<string>("Securitycard")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("securitycard");

                    b.Property<string>("Ssduns")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ssduns");

                    b.Property<string>("Userid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("userid");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("gusers_pkey");

                    b.ToTable("gusers", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gusergroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Groupid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("groupid");

                    b.Property<string>("Groupname")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("groupname");

                    b.HasKey("Id")
                        .HasName("gusergroups_pkey");

                    b.ToTable("gusergroups", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.GusersCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Appdate")
                        .HasColumnType("date")
                        .HasColumnName("appdate");

                    b.Property<string>("Appid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("appid");

                    b.Property<string>("Cardexpiration")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cardexpiration");

                    b.Property<string>("Cardname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardname");

                    b.Property<string>("Cardnumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardnumber");

                    b.Property<string>("Cardsecurity")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cardsecurity");

                    b.Property<string>("Cardtype")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cardtype");

                    b.Property<string>("Userid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("gusers_cards_pkey");

                    b.ToTable("gusers_cards", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Vendoraddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendoraddress1");

                    b.Property<string>("Vendoraddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendoraddress2");

                    b.Property<string>("Vendorcity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorcity");

                    b.Property<string>("Vendorid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorid");

                    b.Property<string>("Vendorname")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("vendorname");

                    b.Property<string>("Vendorstate")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorstate");

                    b.Property<string>("Vendorzip")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vendorzip");

                    b.HasKey("Id")
                        .HasName("gvendor_pkey");

                    b.ToTable("gvendor", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvoicegateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Switchid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("switchid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gvoicegateway_pkey");

                    b.ToTable("gvoicegateway", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvoiceplatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Platformid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("platformid");

                    b.Property<int?>("Platformtype")
                        .HasColumnType("integer")
                        .HasColumnName("platformtype");

                    b.Property<string>("Serverid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("serverid");

                    b.Property<string>("Telemetryipaddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telemetryipaddress");

                    b.Property<string>("Vpnid1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid1");

                    b.Property<string>("Vpnid2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vpnid2");

                    b.HasKey("Id")
                        .HasName("gvoiceplatforms_pkey");

                    b.ToTable("gvoiceplatforms", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvoiceplatformtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Platformtype")
                        .HasColumnType("integer")
                        .HasColumnName("platformtype");

                    b.HasKey("Id")
                        .HasName("gvoiceplatformtype_pkey");

                    b.ToTable("gvoiceplatformtype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvoiceservice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Networkid")
                        .HasColumnType("integer")
                        .HasColumnName("networkid");

                    b.Property<string>("Voiceserviceid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("voiceserviceid");

                    b.HasKey("Id")
                        .HasName("gvoiceservices_pkey");

                    b.ToTable("gvoiceservices", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvoicetrunk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Trunkid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("trunkid");

                    b.Property<int?>("Trunktypeid")
                        .HasColumnType("integer")
                        .HasColumnName("trunktypeid");

                    b.HasKey("Id")
                        .HasName("gvoicetrunks_pkey");

                    b.ToTable("gvoicetrunks", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvoicetrunktype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Trunktypeid")
                        .HasColumnType("integer")
                        .HasColumnName("trunktypeid");

                    b.HasKey("Id")
                        .HasName("gvoicetrunktype_pkey");

                    b.ToTable("gvoicetrunktype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvolume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Diskid")
                        .HasColumnType("integer")
                        .HasColumnName("diskid");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<string>("Volumeid")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("volumeid");

                    b.Property<int?>("Volumetype")
                        .HasColumnType("integer")
                        .HasColumnName("volumetype");

                    b.HasKey("Id")
                        .HasName("gvolumes_pkey");

                    b.ToTable("gvolumes", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvpn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Circuitid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("circuitid");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Inventoryid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventoryid");

                    b.Property<int?>("Vpnid")
                        .HasColumnType("integer")
                        .HasColumnName("vpnid");

                    b.HasKey("Id")
                        .HasName("gvpns_pkey");

                    b.ToTable("gvpns", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvpntype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int?>("Vpntypeid")
                        .HasColumnType("integer")
                        .HasColumnName("vpntypeid");

                    b.HasKey("Id")
                        .HasName("gvpntype_pkey");

                    b.ToTable("gvpntype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gvservicetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Voicetypeid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("voicetypeid");

                    b.HasKey("Id")
                        .HasName("gvservicetype_pkey");

                    b.ToTable("gvservicetype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gwholesaler", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alohaid")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("alohaid");

                    b.Property<int?>("Companyid")
                        .HasColumnType("integer")
                        .HasColumnName("companyid");

                    b.Property<string>("Dynamicsid")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("dynamicsid");

                    b.Property<string>("Oracleid")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("oracleid");

                    b.Property<string>("Wholesalename")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("wholesalename");

                    b.HasKey("Id")
                        .HasName("gwholesalers_pkey");

                    b.ToTable("gwholesalers", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gworkorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Closedate")
                        .HasColumnType("date")
                        .HasColumnName("closedate");

                    b.Property<string>("Custid")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("custid")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Dynamicsid")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("dynamicsid")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Opendate")
                        .HasColumnType("date")
                        .HasColumnName("opendate");

                    b.Property<string>("Oracleid")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("oracleid")
                        .IsFixedLength();

                    b.Property<string>("Priority")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("priority")
                        .IsFixedLength();

                    b.Property<string>("Res1")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("res1")
                        .IsFixedLength();

                    b.Property<string>("Res2")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("res2")
                        .IsFixedLength();

                    b.Property<string>("Res3")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("res3")
                        .IsFixedLength();

                    b.Property<string>("Res4")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("res4")
                        .IsFixedLength();

                    b.Property<string>("Summary")
                        .HasMaxLength(200)
                        .HasColumnType("character(200)")
                        .HasColumnName("summary")
                        .IsFixedLength();

                    b.Property<string>("Ticketstatus")
                        .HasMaxLength(100)
                        .HasColumnType("character(100)")
                        .HasColumnName("ticketstatus")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("gworkorders_pkey");

                    b.ToTable("gworkorders", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.Gworktype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<int>("Worktypeid")
                        .HasColumnType("integer")
                        .HasColumnName("worktypeid");

                    b.HasKey("Id")
                        .HasName("gworktype_pkey");

                    b.ToTable("gworktype", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("extension")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ip_address")
                        .HasDefaultValueSql("'0.0.0.0'::character varying");

                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("item_id");

                    b.Property<DateTime>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("log_date")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MessageLanguageKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("message_language_key")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("h_action_logs_pkey");

                    b.HasIndex(new[] { "Extension", "ItemId" }, "h_action_logs_idx_extension_itemid");

                    b.HasIndex(new[] { "UserId" }, "h_action_logs_idx_user_id");

                    b.HasIndex(new[] { "UserId", "Extension" }, "h_action_logs_idx_user_id_extension");

                    b.HasIndex(new[] { "UserId", "LogDate" }, "h_action_logs_idx_user_id_logdate");

                    b.ToTable("h_action_logs", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HActionLogConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IdHolder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id_holder");

                    b.Property<string>("TableName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("table_name");

                    b.Property<string>("TextPrefix")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text_prefix");

                    b.Property<string>("TitleHolder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title_holder");

                    b.Property<string>("TypeAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type_title")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("h_action_log_config_pkey");

                    b.ToTable("h_action_log_config", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HActionLogsExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("extension")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("h_action_logs_extensions_pkey");

                    b.ToTable("h_action_logs_extensions", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HActionLogsUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Extensions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extensions");

                    b.Property<int>("Notify")
                        .HasColumnType("integer")
                        .HasColumnName("notify");

                    b.HasKey("UserId")
                        .HasName("h_action_logs_users_pkey");

                    b.HasIndex(new[] { "Notify" }, "h_action_logs_users_idx_notify");

                    b.ToTable("h_action_logs_users", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Primary Key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level")
                        .HasComment("The cached level in the nested tree.");

                    b.Property<long>("Lft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("lft")
                        .HasComment("Nested set lft.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasComment("The unique name for the asset.");

                    b.Property<long>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("parent_id")
                        .HasComment("Nested set parent.");

                    b.Property<long>("Rgt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("rgt")
                        .HasComment("Nested set rgt.");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasMaxLength(5120)
                        .HasColumnType("character varying(5120)")
                        .HasColumnName("rules")
                        .HasComment("JSON encoded access control.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title")
                        .HasComment("The descriptive title for the asset.");

                    b.HasKey("Id")
                        .HasName("h_assets_pkey");

                    b.HasIndex(new[] { "Name" }, "h_assets_idx_asset_name")
                        .IsUnique();

                    b.HasIndex(new[] { "Lft", "Rgt" }, "h_assets_idx_lft_rgt");

                    b.HasIndex(new[] { "ParentId" }, "h_assets_idx_parent_id");

                    b.ToTable("h_assets", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HAssociation", b =>
                {
                    b.Property<string>("Context")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("context")
                        .HasComment("The context of the associated item.");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("A reference to the associated item.");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character(32)")
                        .HasColumnName("key")
                        .IsFixedLength()
                        .HasComment("The key for the association computed from an md5 on associated ids.");

                    b.HasKey("Context", "Id")
                        .HasName("h_associations_idx_context_id");

                    b.HasIndex(new[] { "Key" }, "h_associations_idx_key");

                    b.ToTable("h_associations", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("Catid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("catid");

                    b.Property<long>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("cid");

                    b.Property<long>("Clicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("clicks");

                    b.Property<string>("Clickurl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("clickurl")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedByAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Custombannercode")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("custombannercode");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("Impmade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("impmade");

                    b.Property<long>("Imptotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("imptotal");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Metakey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metakey");

                    b.Property<string>("MetakeyPrefix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("metakey_prefix")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<short>("OwnPrefix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("own_prefix");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<DateTime>("PublishDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_down")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("PublishUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_up")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("PurchaseType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("purchase_type")
                        .HasDefaultValueSql("'-1'::integer");

                    b.Property<DateTime>("Reset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reset")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("state");

                    b.Property<short>("Sticky")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("sticky");

                    b.Property<short>("TrackClicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("track_clicks")
                        .HasDefaultValueSql("'-1'::integer");

                    b.Property<short>("TrackImpressions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("track_impressions")
                        .HasDefaultValueSql("'-1'::integer");

                    b.Property<long>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("type");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("h_banners_pkey");

                    b.HasIndex(new[] { "Catid" }, "h_banners_idx_banner_catid");

                    b.HasIndex(new[] { "Language" }, "h_banners_idx_language");

                    b.HasIndex(new[] { "MetakeyPrefix" }, "h_banners_idx_metakey_prefix");

                    b.HasIndex(new[] { "OwnPrefix" }, "h_banners_idx_own_prefix");

                    b.HasIndex(new[] { "State" }, "h_banners_idx_state");

                    b.ToTable("h_banners", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HBannerClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Extrainfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extrainfo");

                    b.Property<string>("Metakey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metakey");

                    b.Property<string>("MetakeyPrefix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("metakey_prefix")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<short>("OwnPrefix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("own_prefix");

                    b.Property<short>("PurchaseType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("purchase_type")
                        .HasDefaultValueSql("'-1'::integer");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("state");

                    b.Property<short>("TrackClicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("track_clicks")
                        .HasDefaultValueSql("'-1'::integer");

                    b.Property<short>("TrackImpressions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("track_impressions")
                        .HasDefaultValueSql("'-1'::integer");

                    b.HasKey("Id")
                        .HasName("h_banner_clients_pkey");

                    b.HasIndex(new[] { "MetakeyPrefix" }, "h_banner_clients_idx_metakey_prefix");

                    b.HasIndex(new[] { "OwnPrefix" }, "h_banner_clients_idx_own_prefix");

                    b.ToTable("h_banner_clients", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HBannerTrack", b =>
                {
                    b.Property<DateTime>("TrackDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("track_date");

                    b.Property<long>("TrackType")
                        .HasColumnType("bigint")
                        .HasColumnName("track_type");

                    b.Property<long>("BannerId")
                        .HasColumnType("bigint")
                        .HasColumnName("banner_id");

                    b.Property<long>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("count");

                    b.HasKey("TrackDate", "TrackType", "BannerId")
                        .HasName("h_banner_tracks_pkey");

                    b.HasIndex(new[] { "BannerId" }, "h_banner_tracks_idx_banner_id");

                    b.HasIndex(new[] { "TrackDate" }, "h_banner_tracks_idx_track_date");

                    b.HasIndex(new[] { "TrackType" }, "h_banner_tracks_idx_track_type");

                    b.ToTable("h_banner_tracks", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("asset_id")
                        .HasComment("FK to the #__assets table.");

                    b.Property<long>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("created_user_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("extension")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("Hits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("hits");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("level");

                    b.Property<long>("Lft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("lft");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("metadata")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("JSON encoded metadata properties.");

                    b.Property<string>("Metadesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("metadesc")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("The meta description for the page.");

                    b.Property<string>("Metakey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("metakey")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("The meta keywords for the page.");

                    b.Property<DateTime>("ModifiedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("ModifiedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("modified_user_id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Params")
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("path")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<short>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("published");

                    b.Property<long>("Rgt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("rgt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("h_categories_pkey");

                    b.HasIndex(new[] { "Extension", "Published", "Access" }, "h_categories_cat_idx");

                    b.HasIndex(new[] { "Access" }, "h_categories_idx_access");

                    b.HasIndex(new[] { "Alias" }, "h_categories_idx_alias");

                    b.HasIndex(new[] { "CheckedOut" }, "h_categories_idx_checkout");

                    b.HasIndex(new[] { "Language" }, "h_categories_idx_language");

                    b.HasIndex(new[] { "Lft", "Rgt" }, "h_categories_idx_left_right");

                    b.HasIndex(new[] { "Path" }, "h_categories_idx_path");

                    b.ToTable("h_categories", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alias");

                    b.Property<long>("Catid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("catid");

                    b.Property<long>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("ConPosition")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("con_position");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedByAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<short>("DefaultCon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("default_con");

                    b.Property<string>("EmailTo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_to");

                    b.Property<string>("Fax")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fax");

                    b.Property<short>("Featured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("featured")
                        .HasComment("Set if contact is featured.");

                    b.Property<long>("Hits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("hits");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("Metadesc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadesc");

                    b.Property<string>("Metakey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metakey");

                    b.Property<string>("Misc")
                        .HasColumnType("text")
                        .HasColumnName("misc");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("mobile")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<string>("Postcode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("postcode");

                    b.Property<DateTime>("PublishDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_down")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("PublishUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_up")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("published");

                    b.Property<string>("Sortname1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sortname1")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Sortname2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sortname2")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Sortname3")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sortname3")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("Suburb")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("suburb");

                    b.Property<string>("Telephone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("telephone");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("user_id");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("version");

                    b.Property<string>("Webpage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("webpage")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Xreference")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("xreference")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("A reference to enable linkages to external data sets.");

                    b.HasKey("Id")
                        .HasName("h_contact_details_pkey");

                    b.HasIndex(new[] { "Access" }, "h_contact_details_idx_access");

                    b.HasIndex(new[] { "Catid" }, "h_contact_details_idx_catid");

                    b.HasIndex(new[] { "CheckedOut" }, "h_contact_details_idx_checkout");

                    b.HasIndex(new[] { "CreatedBy" }, "h_contact_details_idx_createdby");

                    b.HasIndex(new[] { "Featured", "Catid" }, "h_contact_details_idx_featured_catid");

                    b.HasIndex(new[] { "Language" }, "h_contact_details_idx_language");

                    b.HasIndex(new[] { "Published" }, "h_contact_details_idx_state");

                    b.HasIndex(new[] { "Xreference" }, "h_contact_details_idx_xreference");

                    b.ToTable("h_contact_details", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("asset_id")
                        .HasComment("FK to the #__assets table.");

                    b.Property<string>("Attribs")
                        .IsRequired()
                        .HasMaxLength(5120)
                        .HasColumnType("character varying(5120)")
                        .HasColumnName("attribs");

                    b.Property<long>("Catid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("catid");

                    b.Property<long>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedByAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<short>("Featured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("featured")
                        .HasComment("Set if article is featured.");

                    b.Property<string>("Fulltext")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fulltext");

                    b.Property<long>("Hits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("hits");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("images");

                    b.Property<string>("Introtext")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("introtext");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("The language code for the article.");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("Metadesc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadesc");

                    b.Property<string>("Metakey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metakey");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("modified_by");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<DateTime>("PublishDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_down")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("PublishUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_up")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Urls")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("urls");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("version");

                    b.Property<string>("Xreference")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("xreference")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("A reference to enable linkages to external data sets.");

                    b.HasKey("Id")
                        .HasName("h_content_pkey");

                    b.HasIndex(new[] { "Access" }, "h_content_idx_access");

                    b.HasIndex(new[] { "Alias" }, "h_content_idx_alias");

                    b.HasIndex(new[] { "Catid" }, "h_content_idx_catid");

                    b.HasIndex(new[] { "CheckedOut" }, "h_content_idx_checkout");

                    b.HasIndex(new[] { "CreatedBy" }, "h_content_idx_createdby");

                    b.HasIndex(new[] { "Featured", "Catid" }, "h_content_idx_featured_catid");

                    b.HasIndex(new[] { "Language" }, "h_content_idx_language");

                    b.HasIndex(new[] { "State" }, "h_content_idx_state");

                    b.HasIndex(new[] { "Xreference" }, "h_content_idx_xreference");

                    b.ToTable("h_content", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HContentFrontpage", b =>
                {
                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("content_id");

                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.HasKey("ContentId")
                        .HasName("h_content_frontpage_pkey");

                    b.ToTable("h_content_frontpage", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HContentRating", b =>
                {
                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("content_id");

                    b.Property<string>("Lastip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastip")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("RatingCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("rating_count");

                    b.Property<long>("RatingSum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("rating_sum");

                    b.HasKey("ContentId")
                        .HasName("h_content_rating_pkey");

                    b.ToTable("h_content_rating", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HContentType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("ContentHistoryOptions")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5120)
                        .HasColumnType("character varying(5120)")
                        .HasColumnName("content_history_options")
                        .HasDefaultValueSql("NULL::character varying")
                        .HasComment("JSON string for com_contenthistory options");

                    b.Property<string>("FieldMappings")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("field_mappings");

                    b.Property<string>("Router")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("router")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rules");

                    b.Property<string>("Table")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("table")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("TypeAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type_title")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("TypeId")
                        .HasName("h_content_types_pkey");

                    b.HasIndex(new[] { "TypeAlias" }, "h_content_types_idx_alias");

                    b.ToTable("h_content_types", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HContentitemTagMap", b =>
                {
                    b.Property<int>("ContentItemId")
                        .HasColumnType("integer")
                        .HasColumnName("content_item_id")
                        .HasComment("PK from the content type table");

                    b.Property<int>("CoreContentId")
                        .HasColumnType("integer")
                        .HasColumnName("core_content_id")
                        .HasComment("PK from the core content table");

                    b.Property<DateTime>("TagDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("tag_date")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone")
                        .HasComment("Date of most recent save for this tag-item");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id")
                        .HasComment("PK from the tag table");

                    b.Property<string>("TypeAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id")
                        .HasComment("PK from the content_type table");

                    b.HasIndex(new[] { "CoreContentId" }, "h_contentitem_tag_map_idx_core_content_id");

                    b.HasIndex(new[] { "TagDate", "TagId" }, "h_contentitem_tag_map_idx_date_id");

                    b.HasIndex(new[] { "TagId", "TypeId" }, "h_contentitem_tag_map_idx_tag_type");

                    b.HasIndex(new[] { "TypeId", "ContentItemId", "TagId" }, "h_uc_ItemnameTagid")
                        .IsUnique();

                    b.ToTable("h_contentitem_tag_map", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HCoreLogSearch", b =>
                {
                    b.Property<long>("Hits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("hits");

                    b.Property<string>("SearchTerm")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("search_term")
                        .HasDefaultValueSql("''::character varying");

                    b.ToTable("h_core_log_searches", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HExtension", b =>
                {
                    b.Property<int>("ExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("extension_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExtensionId"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("access");

                    b.Property<int>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("ClientId")
                        .HasColumnType("smallint")
                        .HasColumnName("client_id");

                    b.Property<string>("CustomData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("custom_data");

                    b.Property<string>("Element")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("element");

                    b.Property<short>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("enabled");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("folder");

                    b.Property<string>("ManifestCache")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("manifest_cache");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<long?>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<long>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("package_id")
                        .HasComment("Parent package ID for extensions installed as a package.");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<short>("Protected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("protected");

                    b.Property<long?>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("state");

                    b.Property<string>("SystemData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("system_data");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("ExtensionId")
                        .HasName("h_extensions_pkey");

                    b.HasIndex(new[] { "Element", "ClientId" }, "h_extensions_element_clientid");

                    b.HasIndex(new[] { "Element", "Folder", "ClientId" }, "h_extensions_element_folder_clientid");

                    b.HasIndex(new[] { "Type", "Element", "Folder", "ClientId" }, "h_extensions_extension");

                    b.ToTable("h_extensions", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access");

                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("asset_id");

                    b.Property<int>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Context")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("context")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("CreatedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("created_user_id");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Fieldparams")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fieldparams");

                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("group_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<short>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("required");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'text'::character varying");

                    b.HasKey("Id")
                        .HasName("h_fields_pkey");

                    b.HasIndex(new[] { "Access" }, "h_fields_idx_access");

                    b.HasIndex(new[] { "CheckedOut" }, "h_fields_idx_checked_out");

                    b.HasIndex(new[] { "Context" }, "h_fields_idx_context");

                    b.HasIndex(new[] { "CreatedUserId" }, "h_fields_idx_created_user_id");

                    b.HasIndex(new[] { "Language" }, "h_fields_idx_language");

                    b.HasIndex(new[] { "State" }, "h_fields_idx_state");

                    b.ToTable("h_fields", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFieldsCategory", b =>
                {
                    b.Property<long>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("field_id");

                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("category_id");

                    b.HasKey("FieldId", "CategoryId")
                        .HasName("h_fields_categories_pkey");

                    b.ToTable("h_fields_categories", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFieldsGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("access");

                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("asset_id");

                    b.Property<int>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Context")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("context")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("modified_by");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ordering");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("h_fields_groups_pkey");

                    b.HasIndex(new[] { "Access" }, "h_fields_groups_idx_access");

                    b.HasIndex(new[] { "CheckedOut" }, "h_fields_groups_idx_checked_out");

                    b.HasIndex(new[] { "Context" }, "h_fields_groups_idx_context");

                    b.HasIndex(new[] { "CreatedBy" }, "h_fields_groups_idx_created_by");

                    b.HasIndex(new[] { "Language" }, "h_fields_groups_idx_language");

                    b.HasIndex(new[] { "State" }, "h_fields_groups_idx_state");

                    b.ToTable("h_fields_groups", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFieldsValue", b =>
                {
                    b.Property<long>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("field_id");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("item_id")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasIndex(new[] { "FieldId" }, "h_fields_values_idx_field_id");

                    b.HasIndex(new[] { "ItemId" }, "h_fields_values_idx_item_id");

                    b.ToTable("h_fields_values", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderFilter", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("filter_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilterId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alias");

                    b.Property<int>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedByAlias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_alias");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<int>("MapCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("map_count");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("modified_by");

                    b.Property<string>("Params")
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("FilterId")
                        .HasName("h_finder_filters_pkey");

                    b.ToTable("h_finder_filters", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LinkId"));

                    b.Property<int?>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("access");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("Indexdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("indexdate")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<decimal>("ListPrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("list_price");

                    b.Property<string>("Md5sum")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("md5sum")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<byte[]>("Object")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("object");

                    b.Property<DateTime>("PublishEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_end_date")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("PublishStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_start_date")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("published");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("route");

                    b.Property<decimal>("SalePrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("sale_price");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int?>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("LinkId")
                        .HasName("h_finder_links_pkey");

                    b.HasIndex(new[] { "Md5sum" }, "h_finder_links_idx_md5");

                    b.HasIndex(new[] { "Published", "State", "Access", "PublishStartDate", "PublishEndDate", "ListPrice" }, "h_finder_links_idx_published_list");

                    b.HasIndex(new[] { "Published", "State", "Access", "PublishStartDate", "PublishEndDate", "SalePrice" }, "h_finder_links_idx_published_sale");

                    b.HasIndex(new[] { "Title" }, "h_finder_links_idx_title");

                    b.HasIndex(new[] { "TypeId" }, "h_finder_links_idx_type");

                    b.ToTable("h_finder_links", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms0", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms0_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms0_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms0_idx_term_weight");

                    b.ToTable("h_finder_links_terms0", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms1", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms1_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms1_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms1_idx_term_weight");

                    b.ToTable("h_finder_links_terms1", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms2", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms2_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms2_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms2_idx_term_weight");

                    b.ToTable("h_finder_links_terms2", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms3", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms3_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms3_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms3_idx_term_weight");

                    b.ToTable("h_finder_links_terms3", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms4", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms4_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms4_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms4_idx_term_weight");

                    b.ToTable("h_finder_links_terms4", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms5", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms5_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms5_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms5_idx_term_weight");

                    b.ToTable("h_finder_links_terms5", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms6", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms6_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms6_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms6_idx_term_weight");

                    b.ToTable("h_finder_links_terms6", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms7", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms7_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms7_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms7_idx_term_weight");

                    b.ToTable("h_finder_links_terms7", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms8", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms8_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms8_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms8_idx_term_weight");

                    b.ToTable("h_finder_links_terms8", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTerms9", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_terms9_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_terms9_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_terms9_idx_term_weight");

                    b.ToTable("h_finder_links_terms9", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTermsa", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_termsa_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_termsa_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_termsa_idx_term_weight");

                    b.ToTable("h_finder_links_termsa", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTermsb", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_termsb_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_termsb_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_termsb_idx_term_weight");

                    b.ToTable("h_finder_links_termsb", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTermsc", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_termsc_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_termsc_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_termsc_idx_term_weight");

                    b.ToTable("h_finder_links_termsc", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTermsd", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_termsd_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_termsd_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_termsd_idx_term_weight");

                    b.ToTable("h_finder_links_termsd", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTermse", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_termse_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_termse_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_termse_idx_term_weight");

                    b.ToTable("h_finder_links_termse", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderLinksTermsf", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("LinkId", "TermId")
                        .HasName("h_finder_links_termsf_pkey");

                    b.HasIndex(new[] { "LinkId", "TermId", "Weight" }, "h_finder_links_termsf_idx_link_term_weight");

                    b.HasIndex(new[] { "TermId", "Weight" }, "h_finder_links_termsf_idx_term_weight");

                    b.ToTable("h_finder_links_termsf", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderTaxonomy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("access");

                    b.Property<short>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("ordering");

                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("parent_id");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("h_finder_taxonomy_pkey");

                    b.HasIndex(new[] { "Access" }, "h_finder_taxonomy_access");

                    b.HasIndex(new[] { "ParentId", "State", "Access" }, "h_finder_taxonomy_idx_parent_published");

                    b.HasIndex(new[] { "Ordering" }, "h_finder_taxonomy_ordering");

                    b.HasIndex(new[] { "ParentId" }, "h_finder_taxonomy_parent_id");

                    b.HasIndex(new[] { "State" }, "h_finder_taxonomy_state");

                    b.ToTable("h_finder_taxonomy", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderTaxonomyMap", b =>
                {
                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<int>("NodeId")
                        .HasColumnType("integer")
                        .HasColumnName("node_id");

                    b.HasKey("LinkId", "NodeId")
                        .HasName("h_finder_taxonomy_map_pkey");

                    b.HasIndex(new[] { "LinkId" }, "h_finder_taxonomy_map_link_id");

                    b.HasIndex(new[] { "NodeId" }, "h_finder_taxonomy_map_node_id");

                    b.ToTable("h_finder_taxonomy_map", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderTerm", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TermId"));

                    b.Property<short>("Common")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("common");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("language");

                    b.Property<int>("Links")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("links");

                    b.Property<short>("Phrase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("phrase");

                    b.Property<string>("Soundex")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("soundex");

                    b.Property<string>("Stem")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("stem");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("term");

                    b.Property<decimal>("Weight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight");

                    b.HasKey("TermId")
                        .HasName("h_finder_terms_pkey");

                    b.HasIndex(new[] { "Soundex", "Phrase" }, "h_finder_terms_idx_soundex_phrase");

                    b.HasIndex(new[] { "Stem", "Phrase" }, "h_finder_terms_idx_stem_phrase");

                    b.HasIndex(new[] { "Term" }, "h_finder_terms_idx_term")
                        .IsUnique();

                    b.HasIndex(new[] { "Term", "Phrase" }, "h_finder_terms_idx_term_phrase");

                    b.ToTable("h_finder_terms", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderTermsCommon", b =>
                {
                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("term");

                    b.HasIndex(new[] { "Language" }, "h_finder_terms_common_idx_lang");

                    b.HasIndex(new[] { "Term", "Language" }, "h_finder_terms_common_idx_word_lang");

                    b.ToTable("h_finder_terms_common", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderToken", b =>
                {
                    b.Property<short>("Common")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("common");

                    b.Property<short>("Context")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)2)
                        .HasColumnName("context");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("language");

                    b.Property<short>("Phrase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("phrase");

                    b.Property<string>("Stem")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("stem");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("term");

                    b.Property<decimal>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("weight")
                        .HasDefaultValueSql("1");

                    b.HasIndex(new[] { "Context" }, "h_finder_tokens_idx_context");

                    b.HasIndex(new[] { "Term" }, "h_finder_tokens_idx_word");

                    b.ToTable("h_finder_tokens", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderTokensAggregate", b =>
                {
                    b.Property<short>("Common")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("common");

                    b.Property<short>("Context")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)2)
                        .HasColumnName("context");

                    b.Property<decimal>("ContextWeight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("context_weight");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("language");

                    b.Property<string>("MapSuffix")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("map_suffix");

                    b.Property<short>("Phrase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("phrase");

                    b.Property<string>("Stem")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("stem");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("term");

                    b.Property<int>("TermId")
                        .HasColumnType("integer")
                        .HasColumnName("term_id");

                    b.Property<decimal>("TermWeight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("term_weight");

                    b.Property<decimal>("TotalWeight")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("total_weight");

                    b.HasIndex(new[] { "TermId" }, "_h_finder_tokens_aggregate_keyword_id");

                    b.HasIndex(new[] { "Term" }, "h_finder_tokens_aggregate_token");

                    b.ToTable("h_finder_tokens_aggregate", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HFinderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("h_finder_types_pkey");

                    b.HasIndex(new[] { "Title" }, "h_finder_types_title")
                        .IsUnique();

                    b.ToTable("h_finder_types", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HLanguage", b =>
                {
                    b.Property<int>("LangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lang_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LangId"));

                    b.Property<int>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("access");

                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("asset_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("image");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("lang_code");

                    b.Property<string>("Metadesc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadesc");

                    b.Property<string>("Metakey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metakey");

                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<long>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("published");

                    b.Property<string>("Sef")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sef");

                    b.Property<string>("Sitename")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("sitename")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<string>("TitleNative")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title_native");

                    b.HasKey("LangId")
                        .HasName("h_languages_pkey");

                    b.HasIndex(new[] { "Access" }, "h_languages_idx_access");

                    b.HasIndex(new[] { "LangCode" }, "h_languages_idx_langcode")
                        .IsUnique();

                    b.HasIndex(new[] { "Ordering" }, "h_languages_idx_ordering");

                    b.HasIndex(new[] { "Sef" }, "h_languages_idx_sef")
                        .IsUnique();

                    b.ToTable("h_languages", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access")
                        .HasComment("The access level required to view the menu item.");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alias")
                        .HasComment("The SEF alias of the menu item.");

                    b.Property<short>("BrowserNav")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("browserNav")
                        .HasComment("The click behaviour of the link.");

                    b.Property<int>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("checked_out")
                        .HasComment("FK to #__users.id");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone")
                        .HasComment("The time the menu item was checked out.");

                    b.Property<short>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("client_id");

                    b.Property<int>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("component_id")
                        .HasComment("FK to #__extensions.id");

                    b.Property<short>("Home")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("home")
                        .HasComment("Indicates if this menu item is the home or default page.");

                    b.Property<string>("Img")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("img")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("The image of the menu item.");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("level")
                        .HasComment("The relative level in the tree.");

                    b.Property<long>("Lft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("lft")
                        .HasComment("Nested set lft.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("link")
                        .HasComment("The actually link the menu item refers to.");

                    b.Property<string>("Menutype")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("menutype")
                        .HasComment("The type of menu this item belongs to. FK to #__menu_types.menutype");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params")
                        .HasComment("JSON encoded data for the menu item.");

                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("parent_id")
                        .HasComment("The parent menu item in the menu tree.");

                    b.Property<string>("Path")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("path")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("The computed path of the menu item based on the alias field.");

                    b.Property<short>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("published")
                        .HasComment("The published state of the menu link.");

                    b.Property<long>("Rgt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("rgt")
                        .HasComment("Nested set rgt.");

                    b.Property<int>("TemplateStyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("template_style_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title")
                        .HasComment("The display title of the menu item.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("type")
                        .HasComment("The type of link: Component, URL, Alias, Separator");

                    b.HasKey("Id")
                        .HasName("h_menu_pkey");

                    b.HasIndex(new[] { "Alias" }, "h_menu_idx_alias");

                    b.HasIndex(new[] { "ClientId", "ParentId", "Alias", "Language" }, "h_menu_idx_client_id_parent_id_alias_language")
                        .IsUnique();

                    b.HasIndex(new[] { "ComponentId", "Menutype", "Published", "Access" }, "h_menu_idx_componentid");

                    b.HasIndex(new[] { "Language" }, "h_menu_idx_language");

                    b.HasIndex(new[] { "Lft", "Rgt" }, "h_menu_idx_left_right");

                    b.HasIndex(new[] { "Menutype" }, "h_menu_idx_menutype");

                    b.HasIndex(new[] { "Path" }, "h_menu_idx_path");

                    b.ToTable("h_menu", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HMenuType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("asset_id");

                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("client_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Menutype")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("menutype");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("h_menu_types_pkey");

                    b.HasIndex(new[] { "Menutype" }, "h_menu_types_idx_menutype")
                        .IsUnique();

                    b.ToTable("h_menu_types", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("folder_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<short>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("priority");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("state");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("UserIdFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("user_id_from");

                    b.Property<long>("UserIdTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("user_id_to");

                    b.HasKey("MessageId")
                        .HasName("h_messages_pkey");

                    b.HasIndex(new[] { "UserIdTo", "State" }, "h_messages_useridto_state");

                    b.ToTable("h_messages", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HMessagesCfg", b =>
                {
                    b.Property<string>("CfgName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cfg_name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("CfgValue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cfg_value")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("user_id");

                    b.HasIndex(new[] { "UserId", "CfgName" }, "h_messages_cfg_idx_user_var_name")
                        .IsUnique();

                    b.ToTable("h_messages_cfg", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access");

                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("asset_id");

                    b.Property<int>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("client_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language");

                    b.Property<string>("Module")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("module")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<string>("Position")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("position")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("PublishDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_down")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("PublishUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_up")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("published");

                    b.Property<short>("Showtitle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("showtitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("h_modules_pkey");

                    b.HasIndex(new[] { "Language" }, "h_modules_idx_language");

                    b.HasIndex(new[] { "Module", "Published" }, "h_modules_newsfeeds");

                    b.HasIndex(new[] { "Published", "Access" }, "h_modules_published");

                    b.ToTable("h_modules", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HModulesMenu", b =>
                {
                    b.Property<long>("Moduleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("moduleid");

                    b.Property<long>("Menuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("menuid");

                    b.HasKey("Moduleid", "Menuid")
                        .HasName("h_modules_menu_pkey");

                    b.ToTable("h_modules_menu", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HNewsfeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("CacheTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(3600L)
                        .HasColumnName("cache_time");

                    b.Property<long>("Catid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("catid");

                    b.Property<int>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("created_by");

                    b.Property<string>("CreatedByAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("Hits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("hits");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("images");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Link")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("link")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("Metadesc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadesc");

                    b.Property<string>("Metakey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metakey");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("Numarticles")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("numarticles");

                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<DateTime>("PublishDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_down")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("PublishUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_up")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("published");

                    b.Property<short>("Rtl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("rtl");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("version");

                    b.Property<string>("Xreference")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("xreference")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("A reference to enable linkages to external data sets.");

                    b.HasKey("Id")
                        .HasName("h_newsfeeds_pkey");

                    b.HasIndex(new[] { "Access" }, "h_newsfeeds_idx_access");

                    b.HasIndex(new[] { "Catid" }, "h_newsfeeds_idx_catid");

                    b.HasIndex(new[] { "CheckedOut" }, "h_newsfeeds_idx_checkout");

                    b.HasIndex(new[] { "CreatedBy" }, "h_newsfeeds_idx_createdby");

                    b.HasIndex(new[] { "Language" }, "h_newsfeeds_idx_language");

                    b.HasIndex(new[] { "Published" }, "h_newsfeeds_idx_state");

                    b.HasIndex(new[] { "Xreference" }, "h_newsfeeds_idx_xreference");

                    b.ToTable("h_newsfeeds", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HOverrider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Primary Key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Constant")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("constant");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file");

                    b.Property<string>("String")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("string");

                    b.HasKey("Id")
                        .HasName("h_overrider_pkey");

                    b.ToTable("h_overrider", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HPostinstallMessage", b =>
                {
                    b.Property<int>("PostinstallMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("postinstall_message_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostinstallMessageId"));

                    b.Property<string>("Action")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("action")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("Action method name or URL");

                    b.Property<string>("ActionFile")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("action_file")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("RAD URI to the PHP file containing action method");

                    b.Property<string>("ActionKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("action_key")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("ConditionFile")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("condition_file")
                        .HasDefaultValueSql("NULL::character varying")
                        .HasComment("RAD URI to file holding display condition method");

                    b.Property<string>("ConditionMethod")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("condition_method")
                        .HasDefaultValueSql("NULL::character varying")
                        .HasComment("Display condition method, must return boolean");

                    b.Property<string>("DescriptionKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description_key")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("Lang key for description");

                    b.Property<short>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("enabled");

                    b.Property<long>("ExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(700L)
                        .HasColumnName("extension_id")
                        .HasComment("FK to jos_extensions");

                    b.Property<short>("LanguageClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("language_client_id");

                    b.Property<string>("LanguageExtension")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("language_extension")
                        .HasDefaultValueSql("'com_postinstall'::character varying")
                        .HasComment("Extension holding lang keys");

                    b.Property<string>("TitleKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title_key")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("Lang key for the title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'link'::character varying")
                        .HasComment("Message type - message, link, action");

                    b.Property<string>("VersionIntroduced")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("version_introduced")
                        .HasDefaultValueSql("'3.2.0'::character varying")
                        .HasComment("Version when this message was introduced");

                    b.HasKey("PostinstallMessageId")
                        .HasName("h_postinstall_messages_pkey");

                    b.ToTable("h_postinstall_messages", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HPrivacyConsent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("Remind")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("remind");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("state");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subject")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Token")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("token")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("h_privacy_consents_pkey");

                    b.HasIndex(new[] { "UserId" }, "h_privacy_consents_idx_user_id");

                    b.ToTable("h_privacy_consents", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HPrivacyRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmToken")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("confirm_token")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("ConfirmTokenCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confirm_token_created_at")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("request_type")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("requested_at")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("h_privacy_requests_pkey");

                    b.ToTable("h_privacy_requests", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HRedirectLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("Header")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(301)
                        .HasColumnName("header");

                    b.Property<long>("Hits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("hits");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("NewUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("new_url");

                    b.Property<string>("OldUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("old_url");

                    b.Property<short>("Published")
                        .HasColumnType("smallint")
                        .HasColumnName("published");

                    b.Property<string>("Referer")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("referer");

                    b.HasKey("Id")
                        .HasName("h_redirect_links_pkey");

                    b.HasIndex(new[] { "ModifiedDate" }, "h_redirect_links_idx_link_modifed");

                    b.HasIndex(new[] { "OldUrl" }, "h_redirect_links_idx_old_url");

                    b.ToTable("h_redirect_links", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HSchema", b =>
                {
                    b.Property<long>("ExtensionId")
                        .HasColumnType("bigint")
                        .HasColumnName("extension_id");

                    b.Property<string>("VersionId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("version_id");

                    b.HasKey("ExtensionId", "VersionId")
                        .HasName("h_schemas_pkey");

                    b.ToTable("h_schemas", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HSession", b =>
                {
                    b.Property<byte[]>("SessionId")
                        .HasColumnType("bytea")
                        .HasColumnName("session_id");

                    b.Property<short?>("ClientId")
                        .HasColumnType("smallint")
                        .HasColumnName("client_id");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<short?>("Guest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("guest");

                    b.Property<int>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("time");

                    b.Property<long?>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("userid");

                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("username")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("SessionId")
                        .HasName("h_session_pkey");

                    b.HasIndex(new[] { "ClientId", "Guest" }, "h_session_idx_client_id_guest");

                    b.HasIndex(new[] { "Time" }, "h_session_time");

                    b.HasIndex(new[] { "Userid" }, "h_session_userid");

                    b.ToTable("h_session", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Access")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("access");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("CreatedByAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("created_user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Hits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("hits");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("images");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("level");

                    b.Property<long>("Lft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("lft");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("metadata");

                    b.Property<string>("Metadesc")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("metadesc");

                    b.Property<string>("Metakey")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("metakey");

                    b.Property<DateTime>("ModifiedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("ModifiedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("modified_user_id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<long>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("path")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("PublishDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_down")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("PublishUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_up")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("published");

                    b.Property<long>("Rgt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("rgt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<string>("Urls")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("urls");

                    b.Property<long>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("h_tags_pkey");

                    b.HasIndex(new[] { "Published", "Access" }, "h_tags_cat_idx");

                    b.HasIndex(new[] { "Access" }, "h_tags_idx_access");

                    b.HasIndex(new[] { "Alias" }, "h_tags_idx_alias");

                    b.HasIndex(new[] { "CheckedOut" }, "h_tags_idx_checkout");

                    b.HasIndex(new[] { "Language" }, "h_tags_idx_language");

                    b.HasIndex(new[] { "Lft", "Rgt" }, "h_tags_idx_left_right");

                    b.HasIndex(new[] { "Path" }, "h_tags_idx_path");

                    b.ToTable("h_tags", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HTemplateStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("client_id");

                    b.Property<string>("Home")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("home")
                        .HasDefaultValueSql("'0'::character varying");

                    b.Property<short>("Inheritable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("inheritable");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<string>("Parent")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parent")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Template")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("template")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("h_template_styles_pkey");

                    b.HasIndex(new[] { "ClientId" }, "h_template_styles_idx_client_id");

                    b.HasIndex(new[] { "ClientId", "Home" }, "h_template_styles_idx_client_id_home");

                    b.HasIndex(new[] { "Template" }, "h_template_styles_idx_template");

                    b.ToTable("h_template_styles", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HUcmBase", b =>
                {
                    b.Property<int>("UcmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ucm_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UcmId"));

                    b.Property<long>("UcmItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("ucm_item_id");

                    b.Property<long>("UcmLanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("ucm_language_id");

                    b.Property<long>("UcmTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("ucm_type_id");

                    b.HasKey("UcmId")
                        .HasName("h_ucm_base_pkey");

                    b.HasIndex(new[] { "UcmItemId" }, "h_ucm_base_ucm_item_id");

                    b.HasIndex(new[] { "UcmLanguageId" }, "h_ucm_base_ucm_language_id");

                    b.HasIndex(new[] { "UcmTypeId" }, "h_ucm_base_ucm_type_id");

                    b.ToTable("h_ucm_base", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HUcmContent", b =>
                {
                    b.Property<int>("CoreContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("core_content_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoreContentId"));

                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("asset_id");

                    b.Property<long>("CoreAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("core_access");

                    b.Property<string>("CoreAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("core_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("CoreBody")
                        .HasColumnType("text")
                        .HasColumnName("core_body");

                    b.Property<long>("CoreCatid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("core_catid");

                    b.Property<DateTime>("CoreCheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("core_checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("CoreCheckedOutUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("core_checked_out_user_id");

                    b.Property<long>("CoreContentItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("core_content_item_id");

                    b.Property<string>("CoreCreatedByAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("core_created_by_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("CoreCreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("core_created_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("CoreCreatedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("core_created_user_id");

                    b.Property<short>("CoreFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("core_featured");

                    b.Property<long>("CoreHits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("core_hits");

                    b.Property<string>("CoreImages")
                        .HasColumnType("text")
                        .HasColumnName("core_images");

                    b.Property<string>("CoreLanguage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("core_language")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("CoreMetadata")
                        .HasColumnType("text")
                        .HasColumnName("core_metadata");

                    b.Property<string>("CoreMetadesc")
                        .HasColumnType("text")
                        .HasColumnName("core_metadesc");

                    b.Property<string>("CoreMetakey")
                        .HasColumnType("text")
                        .HasColumnName("core_metakey");

                    b.Property<DateTime>("CoreModifiedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("core_modified_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<long>("CoreModifiedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("core_modified_user_id");

                    b.Property<long>("CoreOrdering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("core_ordering");

                    b.Property<string>("CoreParams")
                        .HasColumnType("text")
                        .HasColumnName("core_params");

                    b.Property<DateTime>("CorePublishDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("core_publish_down")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("CorePublishUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("core_publish_up")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("CoreState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("core_state");

                    b.Property<string>("CoreTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("core_title")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("CoreTypeAlias")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("core_type_alias")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long>("CoreTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("core_type_id");

                    b.Property<string>("CoreUrls")
                        .HasColumnType("text")
                        .HasColumnName("core_urls");

                    b.Property<long>("CoreVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("core_version");

                    b.Property<string>("CoreXreference")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("core_xreference")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("CoreContentId")
                        .HasName("h_ucm_content_pkey");

                    b.HasIndex(new[] { "CoreAccess" }, "h_ucm_content_idx_access");

                    b.HasIndex(new[] { "CoreAlias" }, "h_ucm_content_idx_alias");

                    b.HasIndex(new[] { "CoreTypeAlias" }, "h_ucm_content_idx_content_type");

                    b.HasIndex(new[] { "CoreCheckedOutUserId" }, "h_ucm_content_idx_core_checked_out_user_id");

                    b.HasIndex(new[] { "CoreCreatedUserId" }, "h_ucm_content_idx_core_created_user_id");

                    b.HasIndex(new[] { "CoreModifiedUserId" }, "h_ucm_content_idx_core_modified_user_id");

                    b.HasIndex(new[] { "CoreTypeId" }, "h_ucm_content_idx_core_type_id");

                    b.HasIndex(new[] { "CoreCreatedTime" }, "h_ucm_content_idx_created_time");

                    b.HasIndex(new[] { "CoreLanguage" }, "h_ucm_content_idx_language");

                    b.HasIndex(new[] { "CoreModifiedTime" }, "h_ucm_content_idx_modified_time");

                    b.HasIndex(new[] { "CoreTitle" }, "h_ucm_content_idx_title");

                    b.HasIndex(new[] { "CoreTypeAlias", "CoreContentItemId" }, "h_ucm_content_idx_type_alias_item_id")
                        .IsUnique();

                    b.HasIndex(new[] { "CoreState", "CoreAccess" }, "h_ucm_content_tag_idx");

                    b.ToTable("h_ucm_content", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HUcmHistory", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("version_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VersionId"));

                    b.Property<int>("CharacterCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("character_count")
                        .HasComment("Number of characters in this version.");

                    b.Property<int>("EditorUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("editor_user_id");

                    b.Property<short>("KeepForever")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("keep_forever")
                        .HasComment("0=auto delete; 1=keep");

                    b.Property<DateTime>("SaveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("save_date")
                        .HasDefaultValueSql("'1970-01-01 00:00:00+00'::timestamp with time zone");

                    b.Property<string>("Sha1Hash")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sha1_hash")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("SHA1 hash of the version_data column.");

                    b.Property<int>("UcmItemId")
                        .HasColumnType("integer")
                        .HasColumnName("ucm_item_id");

                    b.Property<int>("UcmTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ucm_type_id");

                    b.Property<string>("VersionData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version_data")
                        .HasComment("json-encoded string of version data");

                    b.Property<string>("VersionNote")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("version_note")
                        .HasDefaultValueSql("''::character varying")
                        .HasComment("Optional version name");

                    b.HasKey("VersionId")
                        .HasName("h_ucm_history_pkey");

                    b.HasIndex(new[] { "SaveDate" }, "h_ucm_history_idx_save_date");

                    b.HasIndex(new[] { "UcmTypeId", "UcmItemId" }, "h_ucm_history_idx_ucm_item_id");

                    b.ToTable("h_ucm_history", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HUpdate", b =>
                {
                    b.Property<int>("UpdateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UpdateId"));

                    b.Property<short?>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("client_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Detailsurl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("detailsurl");

                    b.Property<string>("Element")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("element")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long?>("ExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("extension_id");

                    b.Property<string>("ExtraQuery")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("extra_query")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Folder")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("folder")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Infourl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("infourl");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long?>("UpdateSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("update_site_id");

                    b.Property<string>("Version")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("version")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("UpdateId")
                        .HasName("h_updates_pkey");

                    b.ToTable("h_updates", null, t =>
                        {
                            t.HasComment("Available Updates");
                        });
                });

            modelBuilder.Entity("GEMAPI.Models.HUpdateSite", b =>
                {
                    b.Property<int>("UpdateSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("update_site_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UpdateSiteId"));

                    b.Property<long?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("enabled");

                    b.Property<string>("ExtraQuery")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("extra_query")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<long?>("LastCheckTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("last_check_timestamp");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("UpdateSiteId")
                        .HasName("h_update_sites_pkey");

                    b.ToTable("h_update_sites", null, t =>
                        {
                            t.HasComment("Update Sites");
                        });
                });

            modelBuilder.Entity("GEMAPI.Models.HUpdateSitesExtension", b =>
                {
                    b.Property<long>("UpdateSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("update_site_id");

                    b.Property<long>("ExtensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("extension_id");

                    b.HasKey("UpdateSiteId", "ExtensionId")
                        .HasName("h_update_sites_extensions_pkey");

                    b.ToTable("h_update_sites_extensions", null, t =>
                        {
                            t.HasComment("Links extensions to update sites");
                        });
                });

            modelBuilder.Entity("GEMAPI.Models.HUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Activation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("activation")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<short>("Block")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("block");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("LastResetTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lastResetTime")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone")
                        .HasComment("Date of last password reset");

                    b.Property<DateTime>("LastvisitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lastvisitDate")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Otep")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("otep")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("OtpKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("otpKey")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("params");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("registerDate")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short?>("RequireReset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("requireReset")
                        .HasComment("Require user to reset password on next login");

                    b.Property<long>("ResetCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("resetCount")
                        .HasComment("Count of password resets since lastResetTime");

                    b.Property<short?>("SendEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("sendEmail");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("username")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("h_users_pkey");

                    b.HasIndex(new[] { "Email" }, "h_users_email");

                    b.HasIndex(new[] { "Block" }, "h_users_idx_block");

                    b.HasIndex(new[] { "Name" }, "h_users_idx_name");

                    b.HasIndex(new[] { "Username" }, "h_users_idx_username")
                        .IsUnique();

                    b.ToTable("h_users", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HUserKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Invalid")
                        .HasColumnType("smallint")
                        .HasColumnName("invalid");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("series");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("time");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<string>("Uastring")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("uastring");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("h_user_keys_pkey");

                    b.HasIndex(new[] { "UserId" }, "h_user_keys_idx_user_id");

                    b.HasIndex(new[] { "Series" }, "h_user_keys_series")
                        .IsUnique();

                    b.ToTable("h_user_keys", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HUserNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<int>("Catid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("catid");

                    b.Property<int>("CheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("checked_out");

                    b.Property<DateTime>("CheckedOutTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("checked_out_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("CreatedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("created_user_id");

                    b.Property<DateTime>("ModifiedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("modified_user_id");

                    b.Property<DateTime>("PublishDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_down")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("PublishUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_up")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<DateTime>("ReviewTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("review_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'::timestamp without time zone");

                    b.Property<short>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("state");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("subject")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("h_user_notes_pkey");

                    b.HasIndex(new[] { "Catid" }, "h_user_notes_idx_category_id");

                    b.HasIndex(new[] { "UserId" }, "h_user_notes_idx_user_id");

                    b.ToTable("h_user_notes", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HUserProfile", b =>
                {
                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<string>("ProfileKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("profile_key");

                    b.Property<string>("ProfileValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasIndex(new[] { "UserId", "ProfileKey" }, "h_user_profiles_idx_user_id_profile_key")
                        .IsUnique();

                    b.ToTable("h_user_profiles", null, t =>
                        {
                            t.HasComment("Simple user profile storage table");
                        });
                });

            modelBuilder.Entity("GEMAPI.Models.HUserUsergroupMap", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("user_id")
                        .HasComment("Foreign Key to #__users.id");

                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("group_id")
                        .HasComment("Foreign Key to #__usergroups.id");

                    b.HasKey("UserId", "GroupId")
                        .HasName("h_user_usergroup_map_pkey");

                    b.ToTable("h_user_usergroup_map", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HUsergroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Primary Key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Lft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("lft")
                        .HasComment("Nested set lft.");

                    b.Property<long>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("parent_id")
                        .HasComment("Adjacency List Reference Id");

                    b.Property<long>("Rgt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("rgt")
                        .HasComment("Nested set rgt.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("h_usergroups_pkey");

                    b.HasIndex(new[] { "ParentId" }, "h_usergroups_idx_usergroup_adjacency_lookup");

                    b.HasIndex(new[] { "Lft", "Rgt" }, "h_usergroups_idx_usergroup_nested_set_lookup");

                    b.HasIndex(new[] { "ParentId", "Title" }, "h_usergroups_idx_usergroup_parent_title_lookup")
                        .IsUnique();

                    b.HasIndex(new[] { "Title" }, "h_usergroups_idx_usergroup_title_lookup");

                    b.ToTable("h_usergroups", (string)null);
                });

            modelBuilder.Entity("GEMAPI.Models.HViewlevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Primary Key");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("ordering");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasMaxLength(5120)
                        .HasColumnType("character varying(5120)")
                        .HasColumnName("rules")
                        .HasComment("JSON encoded access control.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''::character varying");

                    b.HasKey("Id")
                        .HasName("h_viewlevels_pkey");

                    b.HasIndex(new[] { "Title" }, "h_viewlevels_idx_assetgroup_title_lookup")
                        .IsUnique();

                    b.ToTable("h_viewlevels", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
