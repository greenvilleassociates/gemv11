CREATE TABLE IF NOT EXISTS GACCOUNTS (ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ACCOUNTNAME VARCHAR(250), COMPANYID INT, WHOLESALEVENDORID INT, INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GAPPS (ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, APPID VARCHAR(150), APPDESCRIPTION VARCHAR(500), APPTYPE INT, APPREGION INT, DBMSTYPE VARCHAR(100), DBMSVENDOR VARCHAR(100), DBMSTOPOLOGY VARCHAR(100), GRIDID INT, INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GAPPTYPE (ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, APPTYPE INT, APPTYPEDESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GBREGIONS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, REGIONID VARCHAR(100), REGIONDESCRIPTION VARCHAR(200), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GBRANCHES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, BRANCHID VARCHAR(100), BRANCDESCRIPTION VARCHAR(200), SITEID VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCHANGE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, CHANGEID BIGINT, WORKEFFORTSIZE CHAR(25), BUSUNIT CHAR(25), ENGINEERID CHAR(50), DESCRIPTION CHAR(3500), STATUS CHAR(10), APPROVALID CHAR(100), CHANGESTART DATE, CHANGEEND DATE, HOLDINFO CHAR(1000), COMMENTS CHAR(3000), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCIRCUITS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, CIRCUITTYPEID INT, DESCRIPTION VARCHAR(150), ALOC VARCHAR(150), ZLOC VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCIRCUITTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, CIRCUITTYPEID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCOMPUTER (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, COMPUTERID VARCHAR(150), COMPUTERTYPE INT, SITEID INT, DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCONDUITS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, CONDUITID VARCHAR(150), CONDUITTYPE INT, ROWID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCOUNTRY (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, COUNTRYID VARCHAR(100), EXCHANGE VARCHAR(100), REGION VARCHAR(100), DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCOMPANY (ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, COMPANYNAME VARCHAR(250), DYNAMICSID VARCHAR(250), ORACLEID VARCHAR(250), ALOHAID VARCHAR(250), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCONDUITS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, CONDUITID VARCHAR(150), CONDUITTYPE INT, ROWID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCPEOTHER (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VENDORID VARCHAR(150), SITEID INT, DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GCUSTOMER (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150), ADDRESS1 VARCHAR(100), ADDRESS2 VARCHAR(100), CITY VARCHAR(100), STATE VARCHAR(100), ZIP VARCHAR(100), PHONE VARCHAR(100), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GDISK (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DISKID VARCHAR(150), DISKTYPE INT, MACHINEID INT, SITEID INT, SERVERID INT, DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), LAT VARCHAR(100), LONG VARCHAR(100), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GDISKTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DISKTYPE INT, DESCRIPTION VARCHAR(150), VENDORID VARCHAR(100), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GDBMSTOPOLOGY (ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, DBMSTOPOLOGY INT, DBMSTOPOLOGYDESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GDBMSTYPE (ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, DBMSTYPE INT, DBMSTYPEDESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GDBMSVENDORS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VENDORNAME VARCHAR(100), VENDORID VARCHAR(100), DYNAMICSID VARCHAR(100), ORACLEID VARCHAR(100), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GDBMSRELEASES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VENDORNAME VARCHAR(100), VENDORID VARCHAR(100), RELEASEDESCRIPTION VARCHAR(100), RELEASEVERSION VARCHAR(100), RELEASESYSTEMREQUIREMENTS VARCHAR(500), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GDBMSREPLICATION (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VENDORNAME VARCHAR(100), VENDORID VARCHAR(100), REPLICATIONDESCRIPTION VARCHAR(100), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GEMPLOYEES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, EMPLOYEEID VARCHAR(100), FULLNAME VARCHAR(200), PRIMARYSITE VARCHAR(100), HOMEOFFICE VARCHAR(100), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GENGINEREGIONS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, REGIONDESCRIPTION VARCHAR(100), REGIONID INT, INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GFAX (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, FAXID VARCHAR(150), FAXTYPE INT, SITEID INT, DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GHDVIDEO (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VIDEOID VARCHAR(150), VIDTYPE INT, SITEID INT, DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GFIREWALLS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, FIREWALLID VARCHAR(150), DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GFIREWALLCONTEXTS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, FIREWALLID VARCHAR(150), CONTEXTID VARCHAR(150), DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS  GGATEWAYS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, GATEWAYID VARCHAR(150), GATEWAYTYPE INT, DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GGATEWAYTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TYPE INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GGRIDNODES (ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, SITEID INT, RACKID INT, LOCATIONID INT, FLOORID INT, IPADDRESS VARCHAR(150), TELEMETRYIP VARCHAR(150), ROOTID1 INT, ROOTID2 INT, INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GGRIDROOTS (ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, SITEID INT, RACKID INT, LOCATIONID INT, FLOORID INT, IPADDRESS VARCHAR(150), TELEMETRYIP VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GGRIDTOPOLOGY (ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, TOPOLOGYID VARCHAR(100), TOPOLOGYDESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GGRIDS (ID INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY, GEOMETRY VARCHAR(100), GRIDSITE1 INT, GRIDNODE1ID INT, GRIDSITE2 INT, GRIDNODE2ID INT, GRIDSITE3 INT, GRIDNODE3ID INT, GRIDSITE4 INT, GRIDNODE4ID INT, GRIDSITE5 INT, GRIDNODE5ID INT, GRIDSITE6 INT, GRIDNODE6ID INT, DRSITE1 INT, DRNODE1ID INT, DRSITE2 INT, DRNODE2ID INT, ROOTID1 INT, ROOTID2 INT, INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GHOSTS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SWITCHID VARCHAR(150), SERVERID VARCHAR(150), DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), LPARS INT, IMAGEID VARCHAR(100), INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GHOSTIMAGES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, IMAGEID VARCHAR(150), DESCRIPTION VARCHAR(150), IMAGEURL VARCHAR(150), IMAGEVENDOR VARCHAR(100), VENDORACCOUNTID VARCHAR(100), OPERATINGSYSTEM VARCHAR(100), INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GHOSTLPARS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, LPARID VARCHAR(150), DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GHOSTVMS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VMID VARCHAR(150), DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GHREGIONS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, REGIONID VARCHAR(100), REGIONDESCRIPTION VARCHAR(200), INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GITSM (ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TICKETID BIGINT, CUSTID CHAR(100), ORACLEID CHAR(100), DYNAMICSID CHAR(100), SUMMARY CHAR(200), PRIORITY CHAR(10), RES1 CHAR(100), RES2 CHAR(100), RES3 CHAR(100), RES4 CHAR(100), TICKETSTATUS CHAR(100), OPENDATE DATE, CLOSEDATE DATE, INVENTORYID VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GITSM_DETAIL (ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DETAILID BIGINT, TICKETID BIGINT, LINENUMBER CHAR(50), LINEDETAIL CHAR(1000), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GMANAGERS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, MANAGERID VARCHAR(100), FULLNAME VARCHAR(200), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GNETWORKS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NETWORKID INT, NETWORKTYPEID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GNETWORKTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NETWORKTYPEID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GNETWORKSPLICEBOX (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SPLICEID BIGINT, DESCRIPTION VARCHAR(150), GPSLAT VARCHAR(100), GPSLONG VARCHAR(100), USER1 VARCHAR(150), USER2 VARCHAR(150), USER3 VARCHAR(150), USER4 VARCHAR(150), USER5 VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GOPTTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, OPTTYPEID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GPRODUCTS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, PRODUCTID INT, PRODUCTNAME CHAR(50), PRODUCT_WOO_ID CHAR(50), PROUDCT_WOO_INSTANCE CHAR(100), PRODUCT_WOO_URL CHAR(250), VENDORID CHAR(25), ORACLEID CHAR(50), DYNAMICSID CHAR(50), DIVISION CHAR(30), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GRIGHTOFWAY (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ROWID INT, ROWTYPE INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GROUTERS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ROUTERID VARCHAR(150), DESCRIPTION VARCHAR(150), SITEID INT, PRIMARYIP VARCHAR(250), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GSECVIDEO (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VIDEOID VARCHAR(150), VIDTYPE INT, SITEID INT, DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GSERVERS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SERVERID VARCHAR(150), DESCRIPTION VARCHAR(150), SITEID INT, PRIMARYIP VARCHAR(250), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GSERVICEORDERS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, REGIONDESCRIPTION VARCHAR(100), REGIONID INT, ORDERTYPE INT, CUSTID VARCHAR(100), ORDERDESCRIPTION VARCHAR(250), TOTALITEMS INT, INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GSERVICEORDERTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SERVICETYPEDESCRIPTION VARCHAR(100), SERVICETYPEID INT, INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GSERVICEORDERDETAIL (ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SKUID INT, SKUIDC VARCHAR(150), LISTCOST VARCHAR(25), UNITCOST VARCHAR(25), STATETAX VARCHAR(25), FEDERALVAT VARCHAR(25), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GSITETYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SITETYPEID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GSITES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SITEID VARCHAR(100), SITEDESCRIPTION VARCHAR(200), SITECLLI VARCHAR(100), ADDRESS1 VARCHAR(150), ADDRESS2 VARCHAR(150), STATEREGION VARCHAR(150), POSTAL VARCHAR(150), PHONE VARCHAR(100), FAX VARCHAR(100), SITECONTACTID INT, INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GSWITCHES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SITEID INT, PRIMARYIP VARCHAR(250), SWITCHID VARCHAR(150), DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GTELEPHONENUMBER (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TN VARCHAR(100), PHONEID INT, CHANNELID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GUSERS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, JID INT, USERID VARCHAR(20), FIRSTNAME VARCHAR(20) NOT NULL, LASTNAME VARCHAR(20) NOT NULL, USERNAME VARCHAR(100), PHONE VARCHAR(20), EMAIL VARCHAR(100), ADDRESS1 VARCHAR(50), ADDRESS2 VARCHAR(50), CITY VARCHAR(50), REGION VARCHAR(50), POSTAL VARCHAR(20), COUNTRY VARCHAR(50), FAXNUMBER VARCHAR(20), CARDNUMBER VARCHAR(50), EXPIRECARD VARCHAR(10), SECURITYCARD VARCHAR(3), NAMEONCARD VARCHAR(100), CARDADDRESS1 VARCHAR(50), CARDADDRESS2 VARCHAR(50), CARDZIP VARCHAR(50), CARDREGION VARCHAR(50), CARDCITY VARCHAR(50), CARDCOUNTRY VARCHAR(50), FIRSTPRODUCT VARCHAR(50), REGISTRATIONDATE VARCHAR(50), SSDUNS VARCHAR(50), SECONDPRODUCT VARCHAR(50), KEYTYPE VARCHAR(50), CELLPHONE VARCHAR(50), CORPORATENAME VARCHAR(50), FULLNAME VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GUSERGROUPS (ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, GROUPNAME VARCHAR(250), GROUPID VARCHAR(100), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GUSERS_CARDS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, USERID VARCHAR(20), APPID VARCHAR(50), CARDNAME VARCHAR(50), CARDTYPE VARCHAR(50), CARDNUMBER VARCHAR(50), CARDEXPIRATION VARCHAR(15), CARDSECURITY VARCHAR(15), APPDATE DATE, INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GVOLUMES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VOLUMEID VARCHAR(150), VOLUMETYPE INT, DISKID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GVOICEGATEWAY (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SWITCHID VARCHAR(150), DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GVOICEPLATFORMS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, PLATFORMID VARCHAR(150), PLATFORMTYPE INT, DESCRIPTION VARCHAR(150), IPADDRESS VARCHAR(50), TELEMETRYIPADDRESS VARCHAR(50), VPNID1 VARCHAR(50), VPNID2 VARCHAR(50), SERVERID VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GVOICEPLATFORMTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, PLATFORMTYPE INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GVOICETRUNKS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TRUNKID VARCHAR(150), TRUNKTYPEID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GVOICETRUNKTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TRUNKTYPEID INT, DESCRIPTION VARCHAR(150), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GWHOLESALERS (ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, WHOLESALENAME VARCHAR(250), COMPANYID INT, DYNAMICSID VARCHAR(250), ORACLEID VARCHAR(250), ALOHAID VARCHAR(250), INVENTORYID VARCHAR(100));
CREATE TABLE IF NOT EXISTS GINVENTORY(ID ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(400), INVENTORYTYPE VARCHAR(50));
CREATE TABLE IF NOT EXISTS GCHANNELS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150), CIRCUTD VARCHAR(100));
CREATE TABLE  IF NOT EXISTS GDATASERVICES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150), NETWORKID INT);
CREATE TABLE  IF NOT EXISTS GROUTERTYPE(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ROUTERTYPEID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GSWITCHTYPE(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SWITCHTYPEID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GCPETYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, CPETYPEID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GCHANNELTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, CHANNHELTYPEID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GINVENTORYTYPE(ID ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TYPEID INT, DESCRIPTION VARCHAR(400), INVENTORYTYPE VARCHAR(50));
CREATE TABLE  IF NOT EXISTS GDSERVICETYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SERVICEID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GTRUNKTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TRUNKTYPEID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GVPNTYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VPNID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GVSERVICETYPE (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SERVICETYPEID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GLAYER2SWITCHES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GMANAGERS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GOPTICALRING (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GOPTICALSEGMENTS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GPHONES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GPHYSICALPAR (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GTRUNKS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GVENDOR (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GVOICESERVICES (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GVPNS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GWHOLESALERS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, INVENTORYID VARCHAR(100), DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS GWORKORDERS (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, WORKTYPEID INT, WORKORDERID VARCHAR(100), DESCRIPTION VARCHAR(150), custid varchar(100), oracleid varchar(100),dynamicsid varchar(100),summary varchar(400), priority varchar(100), res1	varchar(100), res2 varchar(100), res3 varchar(100),res4 varchar(100), ticketstatus varchar(100), opendate date, closedate date);
CREATE TABLE  IF NOT EXISTS GWORKTYPE(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, WORKTYPEID INT NOT NULL, DESCRIPTION VARCHAR(150));
INSERT INTO GWORKTYPE(WORKTYPEID, DESCRIPTION) VALUES (1, "MASTER TICKET - NETWORK MAINTENANCE");
INSERT INTO GWORKTYPE(WORKTYPEID, DESCRIPTION) VALUES (2, "MASTER TICKET - GRID APP INSTALL - RISK LOW");
INSERT INTO GWORKTYPE(WORKTYPEID, DESCRIPTION) VALUES (3, "MASTER TICKET - GRID APP INSTALL - RISK HIGH");
INSERT INTO GWORKTYPE(WORKTYPEID, DESCRIPTION) VALUES (4, "MASTER TICKET - GRID APP INSTALL - MODERATE RISK");
/*AUDIT FROM PG MISSNG*/
CREATE TABLE  IF NOT EXISTS GVENDOR(ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, WORKTYPEID INT NOT NULL, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gvoiceservices (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VOICETYPEID INT NOT NULL, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gvpns (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, VPNID INT NOT NULL, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gvpntype (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gvservicetype (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gwholesalers (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gworkorders (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gchannels (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gchanneltype (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gcpetype (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gdataservices (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gdservicetype (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));   
CREATE TABLE  IF NOT EXISTS ghdvideo (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS glayer2switches (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gmanagers (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gopticalring (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gopticalsegments (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, SEGMENTA INT NOT NULL, SEGMENTZ INT NOT NULL, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gphones (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, PHONETYPEID INT NOT NULL, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gphysicalpar (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, PARTYPEID INT NOT NULL, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gtrunks (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TYPEID INT NOT NULL, DESCRIPTION VARCHAR(150));
CREATE TABLE  IF NOT EXISTS gtrunktype (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TRUNKTYPEID INT NOT NULL, DESCRIPTION VARCHAR(150));


alter table gapps add column targetgeometry varchar(150) DEFAULT '4sidedpolygon';
alter table gapps add column targetgrid varchar(150) DEFAULT 'US-InnerCore';
alter table gapps add column targetgridid int DEFAULT 1;
alter table gapps add column iscompliant int;
alter table gsites add COLUMN CLLICODE varchar(50);
alter table ggrids add vendor varchar(100), add vendorid varchar(150), add vendorgridname varchar(200);
alter table gsites add COLUMN CLLICODE varchar(50);
alter table ggrids add vendor varchar(100), add vendorid varchar(150), add vendorgridname varchar(200);
*/
insert into ghregions (regionid, regiondescription) values ('Region1', 'NorthAmerica');
insert into gapptype (apptype, apptypedescription) values (2, 'Controller');
insert into gapptype (apptype, apptypedescription) values (1, 'Grid SSO');
insert into gapptype (apptype, apptypedescription) values (5, 'Simplex SSO');
insert into gapptype (apptype, apptypedescription) values (3, 'Gridified Web App');
insert into gapptype (apptype, apptypedescription) values (4, 'Gridified Mobile App');
insert into gapptype (apptype, apptypedescription) values (7, 'Simplex Mobile App');
insert into gapptype (apptype, apptypedescription) values (6, 'Simplex Web App');
insert into ggridtopology (topologyid, topologydescription) values ('T1+0', 'Triangle Active-Active-Active, No DR');
insert into ggridtopology (topologyid, topologydescription) values ('HA+0', 'HA Pair Active-Active, No DR');
insert into ggridtopology (topologyid, topologydescription) values ('M5+0', '5 NodeMesh, No DR');
insert into gsites (address1) values ('300main');
insert into gsites (address1) values ('1800 washington');
insert into gsites (address1) values ('Amazon Montreal DC');
insert into gsites (address1) values ('Google Iowa Cedar Rapids DC');
insert into gsites (address1) values ('Microsoft Seattle Azure DC West Original');
insert into ggridroots (siteid) VALUES (1);
insert into ggridroots (siteid) VALUES (2);
insert into ggridnodes (siteid) VALUES (1),(2), (3), (4), (5);
insert into ggrids (geometry) VALUES (3);
insert into gdbmsvendors (vendorname) values ('ORACLE');
insert into gdbmsreplication (vendorname) values ('ORACLE');
insert into gdbmsreleases (vendorname) values ('ORACLE');
insert into gdbmstopology (dbmstopologydescription) values ('HAmirror + 0');
insert into gengineregions (regiondescription, regionid) VALUES ('NorthAmerica', 1), ('Canada', 2), ('CentralAmericaAndMexico', 3), ('SouthAmerica', 4), ('Europe', 5), ('MedittereanBasin', 6), ('Africa', 7), ('India', 8), ('CentralAsiaAndRussia', 9), ('SouthPacific',10), ('NorthPacific', 11);
insert into gserviceorders (regionid) VALUES (1);
insert into gwholesalers (wholesalename) values ('CockyEnterprises');
insert into gaccounts (accountname) values ('University of South Carolina - Engineering');
insert into gcompany (companyname) values ('University of South Carolina - Master Account');
insert into gusergroups (groupname) values ('Administrators');
insert into gusergroups (groupname) values ('Noc Users');
insert into gusergroups (groupname) values ('Registered Users');
insert into gusergroups (groupname) values ('Super Users');
INSERT INTO GUSERS_CARDS (USERID,APPID) VALUES ('1','1');
INSERT INTO GPRODUCTS (PRODUCTNAME) VALUES('ISP1-YEAR-PERSONAL-GLOCATIONINFO');
INSERT INTO GPRODUCTS (PRODUCTNAME) VALUES('ISP1-YEAR-FAMILY-GLOCATIONINFO');
INSERT INTO GPRODUCTS (PRODUCTNAME) VALUES('BUSINESSPRO-VM-1YEAR-GLOCATIONINFO-100 USERS');
INSERT INTO GPRODUCTS (PRODUCTNAME) VALUES('PANELPLUS-VM-1YEAR-GLOCATIONINFO-25 USERS');
INSERT INTO GPRODUCTS (PRODUCTNAME) VALUES('PANELPLUS-VM-1YEAR-GLOCATIONINFO-100 USERS');
INSERT INTO GPRODUCTS (PRODUCTNAME) VALUES('ISP1-YEAR-TELEPRO-LITE-GLOCATIONINFO');
INSERT INTO GPRODUCTS (PRODUCTNAME) VALUES('ISP1-YEAR-PERSONAL-PARAMOUNTPLUS');
INSERT INTO GPRODUCTS (PRODUCTNAME) VALUES('ISP1-YEAR-PERSONAL-PEACOCKTV');
INSERT INTO GPRODUCTS (PRODUCTNAME) VALUES('ISP1-YEAR-PERSONAL-PREMIUM');
INSERT INTO GCHANGE VALUES(1, 'MEDIUM','CAPUS', 'JSSG33', 'FREEPBX HTML INSTERFACE INSTALL ON LOWELL.CAPITOLTECHNOLOGY.US', 'ERRORED-ST', 'NOCEXEC0003', '02/01/2020', '12/31/2022', 'NO HOLDS - NOT SERVICE IMPACING', 'WEIRD PHP PROBLEMS WHICH WE CANT EXPLAIN ON APACHE... PENDING MOVE TO NGINX');
INSERT INTO GCHANGE VALUES(2, 'SMALL','CAPUS', 'JSSG33', '3CX URL ADDS SSL INSTERFACE INSTALL ON DEBIAN1.CAPITOLTECHNOLOGY.US', 'ERRORED-ST', 'NOCEXEC0003', '02/01/2020', '12/31/2022', 'NO HOLDS - NOT SERVICE IMPACING', 'SSL SITE FOR NEW URL IS NEEDED, BUT UPSTREAM GW, CRASHES THE PRODUCTION WORK');
INSERT INTO GCHANGE VALUES(3, 'SMALL','CAPUS', 'JSSG33', '3CX URL ADDS SSL INSTERFACE INSTALL ON DEBIAN2.CAPITOLTECHNOLOGY.US', 'ERRORED-ST', 'NOCEXEC0003', '02/01/2020', '12/31/2022', 'NO HOLDS - NOT SERVICE IMPACING', 'SEE CHANGE2 COMMENTS');
INSERT INTO GCHANGE VALUES(4, 'SMALL','CAPUS', 'JSSG33', '3CX URL ADDS SSL INSTERFACE INSTALL ON DEBIAN3.CAPITOLTECHNOLOGY.US', 'ERRORED-ST', 'NOCEXEC0003', '02/01/2020', '12/31/2022', 'NO HOLDS - NOT SERVICE IMPACING', 'SEE CHANGE3 COMMENTS');
INSERT INTO GCHANGE VALUES(5, 'XLARGE','GLINFO', 'JSSG33', 'GL1.GLOCATION.INFO AUTOMATION PROVISIONING PRODUCT DETAIL INTERFACE INSTALL ON CHICAGO.CAPITOLTECHNOLOGY.US', 'ERRORED-ST', 'NOCEXEC0003', '02/01/2020', '12/31/2022', 'NO HOLDS - NOT SERVICE IMPACING', 'FRONTEND-PARTIALLY AUTOMATED WITH DUPLICATE INFO');
INSERT INTO GCHANGE VALUES(6, 'XLARGE','CAPUS', 'JSSG33', 'DNS MIGRATION TO CAPUS SERVERS', 'LONG-TERM', 'NOCEXEC0003', '02/01/2020', '12/31/2022', 'ONHOLD', 'ON HOLD FOR NC01-PROVISIONING');
INSERT INTO GCHANGE VALUES(7, 'XLARGE','GACOM', 'JSSG33', 'NC01 PROVISIONING', 'LONG-TERM', 'NOCEXEC0003', '02/01/2022', '12/31/2022', 'PLANNED', 'NC01 INSTALL AND HYPERV INSTALL ACROSS WAN');
INSERT INTO GCHANGE VALUES(8, 'XLARGE','GACOM', 'JSSG33', 'CA01 PROVISIONING', 'LONG-TERM', 'NOCEXEC0003', '02/01/2022', '12/31/2022', 'PLANNED', 'CA01 INSTALL AND HYPERV INSTALL ACROSS WAN');
INSERT INTO GITSM (CUSTID, ORACLEID, DYNAMICSID) VALUES('CAPUS-INTERNAL', 'CAPUS0001', 'CAPUS0001');
INSERT INTO GUSERS VALUES(2, 'JOHN', 'STRITZINGER', 'JOHNSTRITZINGER','843-352-3459', 'js@glocation.info', '1800 Washington Street', '#4', 'Columbia', 'SC', '29201', 'UNITEDSTATES', '843-352-3450', '1', '1', '1','1','1','1', '1', '1','1','1');
INSERT INTO GUSERS VALUES(1, 'JAMES', 'STRITZINGER', 'JAMESWSTRITZINGER','512-352-3459', 'jws@glocation.info', '1800 Washington Street', '#4', 'Columbia', 'SC', '29201', 'UNITEDSTATES', '512-352-3450', '1', '1', '1','1','1','1', '1', '1','1','1');
insert into gvoiceplatforms (description) VALUES ('1');
insert into gvoiceplatformtype (description) VALUES('1');
insert into gservers (description) VALUES ('1');
insert into gfirewalls (description) VALUES ('1');
insert into gfirewallcontexts (description) VALUES ('1');
insert into grouters (description) VALUES ('1');
insert into gswitches (description) VALUES ('1');
insert into gvoicegateway (description) VALUES ('1');
insert into ghosts (description) VALUES ('1');
insert into ghostlpars (description) VALUES ('1');
insert into ghostvms (description) VALUES ('1');
insert into ghostimages (description) VALUES ('1');
insert into ggateways (description) VALUES ('1');
insert into ggatewaytype (description) VALUES ('1');
insert into gsitetype (description) VALUES ('1');
insert into gvoicetrunks (description) VALUES ('1');
insert into gvoicetrunktype (description) VALUES ('1');
insert into gcircuits (description) VALUES ('1');
insert into gcircuittype (description) VALUES ('1');
insert into gnetworks (description) VALUES ('1');
insert into gnetworktype (description) VALUES ('1');
insert into gnetworksplicebox (description) VALUES ('1');
insert into gvendor(vendorname) VALUES ('1');
insert into gcpeother (description) VALUES ('1');
insert into gfax (description) VALUES ('1');
insert into gphones (description) VALUES ('1');
insert into ghdvideo (description) VALUES ('1');
insert into gsecvideo (description) VALUES ('1');
insert into gcustomer (description) VALUES ('1');
insert into gdisk (description) VALUES ('1');
insert into gdisktype (description) VALUES ('1');
insert into gopticalring (description) VALUES ('1');
insert into gopttype(description) VALUES ('1');
insert into gcomputer (description) VALUES ('1');
insert into gvolumes (description) VALUES ('1');
insert into gconduits (description) VALUES ('1');
insert into grightofway (description) VALUES ('1');
insert into gtelephonenumber (description) VALUES ('1');
insert into gcountry (description) VALUES ('1');
insert into gphysicalpar (description) VALUES ('1');
insert into gvoiceservices (description) VALUES ('1');
insert into gdataservices (description) VALUES ('1');
insert into gcircuittype (description) VALUES ('1');
insert into gtrunktype (description) VALUES ('1');
insert into gdservicetype (description) VALUES ('1');
insert into gvservicetype (description) VALUES ('1');
insert into gcpetype (description) VALUES ('1');
insert into gsitetype (description) VALUES ('1');
insert into gopticalsegments (description) VALUES ('1');
insert into gvpns (description) VALUES ('1');
insert into gvpntype (description) VALUES ('1');
insert into gchannels (description) VALUES ('1');
insert into gchanneltype (description) VALUES ('1');
insert into ghregions (regionid, regiondescription) values ('Region1', 'NorthAmerica');
insert into gapptype (apptype, apptypedescription) values (2, 'Controller');
insert into gapptype (apptype, apptypedescription) values (1, 'Grid SSO');
insert into gapptype (apptype, apptypedescription) values (5, 'Simplex SSO');
insert into gapptype (apptype, apptypedescription) values (3, 'Gridified Web App');
insert into gapptype (apptype, apptypedescription) values (4, 'Gridified Mobile App');
insert into gapptype (apptype, apptypedescription) values (7, 'Simplex Mobile App');
insert into gapptype (apptype, apptypedescription) values (6, 'Simplex Web App');
insert into ggridtopology (topologyid, topologydescription) values ('T1+0', 'Triangle Active-Active-Active, No DR');
insert into ggridtopology (topologyid, topologydescription) values ('HA+0', 'HA Pair Active-Active, No DR');
insert into ggridtopology (topologyid, topologydescription) values ('M5+0', '5 NodeMesh, No DR');
insert into gsites (address1) values ('300main');
insert into gsites (address1) values ('1800 washington');
insert into gsites (address1) values ('Amazon Montreal DC');
insert into gsites (address1) values ('Google Iowa Cedar Rapids DC');
insert into gsites (address1) values ('Microsoft Seattle Azure DC West Original');
insert into ggridroots (siteid) VALUES (1);
insert into ggridroots (siteid) VALUES (2);
insert into ggridnodes (siteid) VALUES (1),(2), (3), (4), (5);
insert into ggrids (geometry) VALUES (3);

//ADD TRIGGER TO REPORT ON COMPLIANT

//POSTGRES TRIGGER
CREATE OR REPLACE FUNCTION enforce_compliance()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.gridid IS DISTINCT FROM NEW.targetgridid THEN
        NEW.iscompliant := 0;
    ELSE
        NEW.iscompliant := 1;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_enforce_compliance
BEFORE INSERT ON gapps
FOR EACH ROW
EXECUTE FUNCTION enforce_compliance();

/*drop table ggrids;
select * from gapps;
select * from gsites;
select * from ggridtopology;
drop table ggrids;
drop table ggridtopology;
drop table ggridnodes;
drop table ggridroots;*/
drop table ggridtopology;
drop table ggridnodes;
drop table ggridroots;*/

